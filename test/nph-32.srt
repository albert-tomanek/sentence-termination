1
00:00:00,000 --> 00:00:03,620
>> Sean: We've looked at Chomsky and we've looked at Finite 
State Automata,

2
00:00:03,620 --> 00:00:06,980
and you've given me a sneak preview about what might be next,

3
00:00:06,980 --> 00:00:08,360
and my first thought was

4
00:00:08,400 --> 00:00:12,060
"What do all these notation marks mean, and where do they come from?"

5
00:00:12,060 --> 00:00:16,760
>> DFB: Chomsky instinctively went for a notation that appeals to

6
00:00:16,760 --> 00:00:21,960
mathematical logicians or theoretical computer scientists 
nowadays -- very tight, very compact.

7
00:00:21,960 --> 00:00:27,500
What he would basically say about a programming 
language identifier,

8
00:00:27,500 --> 00:00:32,300
which we're trying to define, is that everything in Chomsky's
world is a sentence.

9
00:00:32,300 --> 00:00:34,300
We've covered this already in the car park:

10
00:00:34,300 --> 00:00:38,560
"A legal sentence in this language is five-five-five-five-five."

11
00:00:38,560 --> 00:00:41,500
So everything's an 'S' in Chomsky notation.

12
00:00:41,500 --> 00:00:46,260
What he would say about the identifiers problem ..., 
In sensible languages,

13
00:00:46,260 --> 00:00:49,540
we've got to start off with a letter. I'll call that L.

14
00:00:49,540 --> 00:00:52,460
And then, the tail piece of the identifier.

15
00:00:52,460 --> 00:00:58,480
Well, it could be nothing at all because a single letter is an
identifier in pretty well every language.

16
00:00:58,480 --> 00:01:02,800
But the tailpiece could be more letters, more digits, in any
combination. Fine.

17
00:01:02,800 --> 00:01:09,140
Now, round about the time late '50s turning into 1960, there
was a whole bunch of them

18
00:01:09,140 --> 00:01:15,960
defining the language ALGOL, which was the first language to
be designed by a committee

19
00:01:15,960 --> 00:01:21,960
and ran into all the usual committee problems, but when you
think back to that era,

20
00:01:21,960 --> 00:01:28,460
FORTRAN was there, COBOL was there, they never, until later
on, had a formal definition.

21
00:01:28,460 --> 00:01:34,240
The ALGOL people said we are going to use something like
Chomsky notation

22
00:01:34,240 --> 00:01:37,160
to define what's a legal program.

23
00:01:37,160 --> 00:01:43,520
John Backus and Peter Naur, who were on the ALGOL 60
defining committee --

24
00:01:43,520 --> 00:01:47,280
Backus was famous as one of the big inventors of FORTRAN;

25
00:01:47,280 --> 00:01:50,320
Peter Naur, a very famous European computer scientist --

26
00:01:50,320 --> 00:01:54,200
they said we need something that is more self-explanatory.

27
00:01:54,200 --> 00:01:58,820
And they invented a notation that looks like this:
pointy brackets!

28
00:01:58,820 --> 00:02:07,500
Yes, this early on! And we are going to say, an identifier - not a
sentence, it's an identifier we're trying to define.

29
00:02:07,740 --> 00:02:15,280
And rather than using Chomsky's arrow, which they felt might
occur in the middle of a program and cause confusion,

30
00:02:15,280 --> 00:02:23,560
they wanted a "is defined as" operation here which wouldn't
ever occur inside a program.

31
00:02:23,560 --> 00:02:25,780
But they wanted it to be clear it was part of the definition.

32
00:02:25,780 --> 00:02:32,580
And they said, "Easy, we're not going to call it L, we're going
to say <letter>".

33
00:02:32,620 --> 00:02:39,640
And you see the advantage straight away: That you can then
say, ahh!, it's a letter followed by

34
00:02:39,640 --> 00:02:42,480
a tailpiece, which we'll call <tail>.

35
00:02:42,480 --> 00:02:47,920
By putting things in the pointy brackets, we're saying:
We don't literally mean that you must look for

36
00:02:47,920 --> 00:02:53,560
the characters l-e-t-t-e-r on your input, no, we mean
"anything that can be a legal letter".

37
00:02:53,560 --> 00:03:00,000
So further down here there'd be another definition saying a 
letter is an 'A', a 'B', a 'C' (...) all the way up to 'Z', and all that.

38
00:03:00,020 --> 00:03:05,740
The tailpiece is far more complicated because it's any mix of
further letters or further digits,

39
00:03:05,740 --> 00:03:08,140
but there could be a definition for digits.

40
00:03:08,140 --> 00:03:14,420
But the point is, they're readable things here, they're readable
notions as they're sometimes called.

41
00:03:14,420 --> 00:03:21,420
And they are pretty well self-explanatory, far more appealing
to be setting out a definition of a programming language,

42
00:03:21,420 --> 00:03:27,720
than you forever having to remember, "Oh, a letter capital
'D', is that a digit or is it a denominator?" You know.

43
00:03:27,720 --> 00:03:32,640
Of course the theoreticians say, "Oh, it's far too verbose, but
yes, I expect I do understand.

44
00:03:32,640 --> 00:03:37,220
You've got to make it clear to people who have got no brain,
exactly what's going on."

45
00:03:37,220 --> 00:03:40,520
So this was very popular for defining languages.

46
00:03:40,520 --> 00:03:48,820
>> Sean: So this is a bit like having a how-to guide, is it? Like
saying "This is not programming; this is how the programming works."

47
00:03:48,820 --> 00:03:57,340
Yeah, exactly, it's a blueprint for legal programs -- all of them
-- they've got to fit into this template basically;

48
00:03:57,340 --> 00:03:59,980
that's what the formal definition did.

49
00:03:59,980 --> 00:04:04,800
And the interesting thing, as many of you are yelling at me now
is, "This is XML, isn't it?"

50
00:04:04,800 --> 00:04:11,480
It is the forerunner of XML. XML, as some of you know,
started of with a thing called SGML,

51
00:04:11,480 --> 00:04:15,640
which was its earlier form, but it was refined into being XML.

52
00:04:15,640 --> 00:04:21,480
And right back from the early SGML days, somebody saw
Backus-Naur Form notation and said

53
00:04:21,480 --> 00:04:26,120
"That is going to be fantastically useful for what we
want to do."

54
00:04:26,120 --> 00:04:30,620
The characteristic of this [BNF] stuff is that you never ever
see it in the actual language itself,

55
00:04:30,620 --> 00:04:36,720
and we can see advantages in actually making these appear
in documents.

56
00:04:36,720 --> 00:04:42,720
Now, we all know this, don't we?! We all accidentally see a listing of
our Web pages that went wrong and you see

57
00:04:42,720 --> 00:04:47,220
things like <p>. So this is XML, be clear.

58
00:04:47,220 --> 00:04:49,840
You see things like <br/>.

59
00:04:49,840 --> 00:04:52,920
>> Sean: And actually, if anyone right-clicks on the YouTube webpage
and selects 'View Source',

60
00:04:52,920 --> 00:04:55,220
they're going to see all this (...) 
>> DFB: Yes, they're going to see this, all of that.

61
00:04:55,240 --> 00:05:02,260
But what the XML people realized was that so long as you
introduce the "end-of" slash --

62
00:05:02,260 --> 00:05:06,860
just elaborate the notation a bit -- you really could use it in
an actual document.

63
00:05:06,860 --> 00:05:08,900
Say: "the paragraph starts here" and "the paragraph ends here".

64
00:05:08,900 --> 00:05:17,700
The break-line here, it starts and finishes, it's just a marker,
and most browsers are tolerant if you miss the slash out,

65
00:05:17,700 --> 00:05:20,620
but, you know, theoretically that should be there.

66
00:05:20,620 --> 00:05:27,380
So, they gave it some new lease of life, really, by saying, well,
we're not going to just keep it in the abstract,

67
00:05:27,380 --> 00:05:33,440
we're actually going to use it, within documents, to clearly delineate
where things start and where things finish.

