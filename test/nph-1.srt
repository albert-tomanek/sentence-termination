1
00:00:00,000 --> 00:00:06,540
Animated GIFs have been around for a very long time. We're talking, like, early days of mass use of the web,

2
00:00:06,540 --> 00:00:10,160
so we're talking GeoCities, mid-90's technology here,

3
00:00:10,160 --> 00:00:15,880
and yet, they're still popular. They're still on every damn BuzzFeed article and every Tumblr there is,

4
00:00:15,880 --> 00:00:18,940
and the reason is because they work pretty much everywhere,

5
00:00:18,940 --> 00:00:24,020
and they're also a really good example of the tradeoff between space and time

6
00:00:24,020 --> 00:00:27,200
or between memory and time in computing.

7
00:00:30,100 --> 00:00:32,780
Animated GIFs have been around so long that they're actually a verb now --

8
00:00:32,780 --> 00:00:38,300
officially recognized, "GIF," or "jiff" if you wanna pronounce it the official way that's blatantly wrong.

9
00:00:38,300 --> 00:00:40,360
You can fight that one out in the comments.

10
00:00:40,360 --> 00:00:45,480
Um, they are a really inefficient way of storing video,

11
00:00:45,480 --> 00:00:50,960
'cause GIF wasn't designed as a format for storing what it's used for now, like actual videoclips.

12
00:00:51,320 --> 00:00:55,400
It was used for simple animations, and you can see that in the restrictions that it has.

13
00:00:55,500 --> 00:01:02,480
The whole gamut of colours that you can use on the web is actually the cube of the number of colours that you can use in a GIF.

14
00:01:02,480 --> 00:01:10,700
So a GIF will let you have 256 colours. The web, 256 values for red, for green, and for blue.

15
00:01:10,700 --> 00:01:15,620
Multiply those, you get 16,777,216 colours!

16
00:01:15,880 --> 00:01:17,480
That's how many you find in a photo.

17
00:01:18,340 --> 00:01:23,200
The GIF will only let you have 256, which is why you get that kind of weird, compressed, grainy effect.

18
00:01:23,520 --> 00:01:29,980
More than that, the colours don't change for each frame, again with rare exceptions using really advanced GIF-makers,

19
00:01:29,980 --> 00:01:32,480
but, generally, one palette for every frame.

20
00:01:32,480 --> 00:01:36,300
So if you go from a beautiful sunset with all those gorgeous yellows in it

21
00:01:36,300 --> 00:01:39,280
and then go to the ocean with lots of blues,

22
00:01:39,280 --> 00:01:42,220
you're gonna run out of colours very, very quickly.

23
00:01:42,700 --> 00:01:44,700
The other restriction with GIFs is frame rate.

24
00:01:44,700 --> 00:01:49,420
Uh, this video you're watching will be either 25 or 30 frames a second -- I don't know which one you're using.

25
00:01:49,800 --> 00:01:52,460
Um, GIFs generally don't go above 20,

26
00:01:52,460 --> 00:01:55,820
and, mm, rare to see anything above 10 or 15,

27
00:01:55,820 --> 00:02:01,520
which is where you get that slightly shaky effect from, the kind of juddery effect you see in a lot of GIFs.

28
00:02:01,520 --> 00:02:05,060
The reason for that is they were designed for animation, not for video.

29
00:02:05,060 --> 00:02:10,540
I mean, GIF is wonderful if what you want to compress are simple line drawings.

30
00:02:11,060 --> 00:02:14,040
If you want to go beyond that, not really all that good.

31
00:02:14,040 --> 00:02:19,800
The reason for that is GIF uses, well, very limited inter-frame compression.

32
00:02:19,800 --> 00:02:22,440
There are two types of compression you can use in video.

33
00:02:22,440 --> 00:02:28,060
Uh, there is inter-frame compression, which is what most modern formats use,

34
00:02:28,060 --> 00:02:32,560
and there is intra-frame compression, which is what GIF mainly uses.

35
00:02:32,560 --> 00:02:37,820
And these ones, "inter-" and "intra-," you'll have heard before for, like, "INTERgalactic space,"

36
00:02:37,820 --> 00:02:39,820
where you have the space between galaxies,

37
00:02:39,820 --> 00:02:44,220
and "INTRAgalactic," which is just the space within one galaxy,

38
00:02:44,220 --> 00:02:50,140
and it's an important distinction, 'cause inter-frame compression is how all modern video formats work,

39
00:02:50,140 --> 00:02:52,720
even back to the early MPEG ones and the, you know,

40
00:02:52,720 --> 00:02:55,460
that were being used at the same time as GIF was coming out.

41
00:02:55,980 --> 00:02:58,500
Uh, MPEG-2, which is what DVDs use,

42
00:02:58,500 --> 00:03:01,760
and MP4, which is almost certainly what you're watching right now,

43
00:03:01,760 --> 00:03:03,760
they all use inter-frame compression.

44
00:03:04,120 --> 00:03:06,540
And the idea is this: you get the first picture,

45
00:03:06,540 --> 00:03:09,960
which is, like, you know, regular photo compression, it's crushed down little,

46
00:03:09,960 --> 00:03:16,160
and then that picture isn't stored for about 25 frames more, until there's a major change.

47
00:03:16,620 --> 00:03:19,560
Until then, it just tracks the differences.

48
00:03:19,560 --> 00:03:29,140
So if I stay perfectly still, as still as I can, then all that the MPEG compression will do, pretty much, is my mouth.

49
00:03:29,140 --> 00:03:32,740
The rest of me, there'll be hardly any data compression there at all

50
00:03:32,740 --> 00:03:34,960
because, well, hopefully the rest of me isn't moving.

51
00:03:34,960 --> 00:03:38,740
On the other hand, if I start flailing about a lot like this, then suddenly --

52
00:03:38,740 --> 00:03:40,560
and, yeah, if you move the camera as well --

53
00:03:40,560 --> 00:03:44,320
suddenly, everything here is having to move. It's having to work a lot harder,

54
00:03:44,320 --> 00:03:47,140
and what it's doing, instead of changing every frame,

55
00:03:47,140 --> 00:03:49,580
instead of storing every single frame, it's saying,

56
00:03:49,580 --> 00:03:53,780
"Right. In here, that big block of pixels that's red, that's that T-shirt,

57
00:03:53,780 --> 00:03:56,280
that's moved a bit that way and zoomed out a bit,

58
00:03:56,280 --> 00:04:01,460
and this pinkish block here that's the hand, that's moved that way a bit and the fingers moved."

59
00:04:01,460 --> 00:04:04,180
So it works out the differences between each frame.

60
00:04:04,720 --> 00:04:07,720
And occasionally it will store the entire image if that's more efficient,

61
00:04:07,720 --> 00:04:11,920
particularly on a quick change, if you suddenly zoom -- thank you! --

62
00:04:11,920 --> 00:04:15,360
um, then it will often go to a new keyframe there, as it's called.

63
00:04:15,600 --> 00:04:18,540
But generally, it will just track the differences between them.

64
00:04:18,540 --> 00:04:21,120
GIF isn't designed to do that. We're talking mid-90's here.

65
00:04:21,120 --> 00:04:23,620
Maybe it was possible to have a video stream going,

66
00:04:23,620 --> 00:04:26,460
but at the same time as you're trying to display a webpage,

67
00:04:26,460 --> 00:04:30,780
at the same time you're trying to track everything else going on in the system, no. You couldn't do that.

68
00:04:30,780 --> 00:04:35,060
So GIF was designed with mostly just intra-frame compression.

69
00:04:35,060 --> 00:04:38,800
Intra-frame compression is like storing a series of photographs.

70
00:04:38,800 --> 00:04:42,720
Each one is pretty much independent from the one before and the one after.

71
00:04:43,160 --> 00:04:44,720
Now, you can see why this is less efficient.

72
00:04:44,720 --> 00:04:48,600
You've got enormous space savings if you say that wall doesn't change at all.

73
00:04:48,600 --> 00:04:50,820
It has limited inter-frame compression.

74
00:04:50,820 --> 00:04:54,600
If nothing has changed in a pixel, you can just set it as transparent

75
00:04:54,600 --> 00:04:57,760
and the one from the previous frame will sort of show through.

76
00:04:57,760 --> 00:05:03,680
But other than that, if something changes, you have to encode it completely all over again,

77
00:05:04,000 --> 00:05:06,960
and this is is one of the basic tradeoffs of computer science,

78
00:05:06,960 --> 00:05:12,040
because in exchange for the extra file size, the extra  data that you're storing,

79
00:05:12,040 --> 00:05:15,820
it is a lot easier to decompress.

80
00:05:15,820 --> 00:05:20,720
Instead of having to worry about storing one frame and another and then managing the differences between them

81
00:05:20,720 --> 00:05:23,240
and all the little fiddly things that you have to do there,

82
00:05:23,240 --> 00:05:28,700
you just show a picture, and then you show another picture, and then another.

83
00:05:28,700 --> 00:05:29,880
Simple as that.

84
00:05:29,880 --> 00:05:37,840
GIF, in exchange for that extra file size, that poor compression, is actually really, really easy.

85
00:05:37,840 --> 00:05:42,560
I mean, back in the GeoCities days, you could have, you know, flaming skulls rotating on your webpage,

86
00:05:42,560 --> 00:05:49,420
an entire background of flames as many GeoCities sites including mine might well have done

87
00:05:49,420 --> 00:05:52,960
I've just realised there are people watching this who aren't gonna remember GeoCities

88
00:05:52,960 --> 00:05:56,240
because they were born after it, which is really weird.

89
00:05:56,240 --> 00:06:01,540
Um, GeoCities was, um, I was about to say the MySpace of its day but, no,

90
00:06:01,540 --> 00:06:03,320
it was the Tumblr of its day.

91
00:06:03,320 --> 00:06:08,040
Um, they gave you free webspace and you wrote up the HTML code yourself and you uploaded it,

92
00:06:08,040 --> 00:06:12,680
and it was wonderful, and then it was bought by Yahoo!, and it was not wonderful anymore. Anyway!

93
00:06:12,680 --> 00:06:15,060
You see this tradeoff everywhere in computer science.

94
00:06:15,060 --> 00:06:20,680
Uh, if you have an app that has to do a really complicated calculation -- it might take a few seconds --

95
00:06:20,680 --> 00:06:24,080
you can either let it do that calculation each time,

96
00:06:24,080 --> 00:06:27,780
just send the formula to do that calculation off to the app,

97
00:06:27,780 --> 00:06:32,060
so the user types in whatever number they need, they hit a button, it does the calculation,

98
00:06:32,060 --> 00:06:34,620
three seconds later the response comes back to them,

99
00:06:34,620 --> 00:06:38,280
or you can make the app much, much bigger.

100
00:06:38,280 --> 00:06:46,000
You could include the result for every number they could possibly type in, precalculated, just calculated once beforehand,

101
00:06:46,000 --> 00:06:49,720
and, instead of sending them a formula, you send them a lookup table.

102
00:06:49,720 --> 00:06:54,740
It might be megabytes or gigabytes in size, but instead of having to do that calculation,

103
00:06:54,740 --> 00:06:57,700
you tradeoff the time for the space,

104
00:06:57,700 --> 00:07:01,980
and, instead of three seconds, you waste 500 megabytes --

105
00:07:01,980 --> 00:07:03,980
those are arbitrary numbers I pulled from anywhere --

106
00:07:03,980 --> 00:07:05,460
but the tradeoff is there.

107
00:07:05,460 --> 00:07:08,960
And the tradeoff is there in cryptography -- I've mentioned rainbow tables before:

108
00:07:08,960 --> 00:07:13,900
"... rainbow tables ... which tradeoff computation time for hard drive space.

109
00:07:13,900 --> 00:07:19,060
So, rather than having to calculate millions and millions of hashes for this one password,

110
00:07:19,060 --> 00:07:21,060
someone has already done it for you."

111
00:07:21,060 --> 00:07:25,600
So you can spend, ah, days or weeks or months or years or millennia brute forcing a password,

112
00:07:25,600 --> 00:07:32,060
or you can use megabytes or gigabytes or terabytes of data to try and jump forward in the calculation.

113
00:07:32,060 --> 00:07:35,900
I'm summarizing here, and cryptography nuts will be extremely angry at me for doing that,

114
00:07:35,900 --> 00:07:37,580
but essentially it's the same tradeoff.

115
00:07:37,580 --> 00:07:40,960
Rather than processor time, you've traded off for space.

116
00:07:40,960 --> 00:07:47,700
It's one of the fundamental principles of computer science and it's best explained with animated GIFs.

117
00:07:51,620 --> 00:07:57,620
The thing about GIFs is it's one of those weird things where the medium defines the message.

118
00:07:57,620 --> 00:08:02,860
Like, movies have to be between about 90 minutes and three hours, depending on the genre.

119
00:08:02,860 --> 00:08:07,440
Uh, Vines have to be six seconds, well six-and-a-half seconds, actually.

120
00:08:07,440 --> 00:08:09,560
This one was determined by technology,

121
00:08:09,560 --> 00:08:14,920
by what bandwidth could support, by what file size was acceptable,

122
00:08:14,920 --> 00:08:18,280
and it's interesting to see something where it's not been decreed,

123
00:08:18,280 --> 00:08:20,280
it's not been agreed over time either.

124
00:08:20,280 --> 00:08:23,360
It's just whatever happens to fit into the technology.

