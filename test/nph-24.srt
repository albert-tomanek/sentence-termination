1
00:00:00,000 --> 00:00:04,350
It's quite clear from the first of these that we've put out that people love the Lego model

2
00:00:04,350 --> 00:00:10,019
Or at least a lot of people do find it useful so yeah, we want to take it on a bit further today

3
00:00:12,580 --> 00:00:14,259
We have this

4
00:00:14,259 --> 00:00:16,559
pre-Prepared linked list of

5
00:00:17,230 --> 00:00:22,470
barbecue items which are all in alphabetical order and last time we covered about

6
00:00:23,439 --> 00:00:25,469
How would you insert a new item?

7
00:00:26,460 --> 00:00:31,900
Into this list if it was something that you'd forgotten to buy and you bought it later

8
00:00:32,220 --> 00:00:39,540
This thing called p is pointing at exactly the same structure at the head of the list as start is

9
00:00:39,780 --> 00:00:44,980
So we now have got the problem of inserting burgers alphabetically into this thing list

10
00:00:45,060 --> 00:00:47,040
Now doing that with conventional techniques

11
00:00:47,040 --> 00:00:52,680
Well, we covered that before and it it's ok it works, but it's somewhat messy

12
00:00:52,680 --> 00:00:58,640
I wasn't happy - never have been happy over the years with the way that that's done in the

13
00:00:59,000 --> 00:01:04,320
Conventional single level pointer technique is there anything you can do that's better?

14
00:01:04,320 --> 00:01:11,180
Well yes, there is this came about or was made clear to me many years ago now in that...

15
00:01:12,900 --> 00:01:14,520
I, as many of you know

16
00:01:14,530 --> 00:01:19,019
originally did this in a language in the early 70s called ALGOL 68 and

17
00:01:19,210 --> 00:01:25,349
The people who had done the ALGOL 68 compiler for the machine we were working on was the Royal Radar

18
00:01:25,630 --> 00:01:28,530
Establishment in Malvern in the UK and

19
00:01:29,079 --> 00:01:34,559
One or other people there who did that compiler could be Subhan Kuba Phillip would would just said

20
00:01:35,020 --> 00:01:39,329
To me and my colleague Annie walker at the time. They said you're teaching this stuff now

21
00:01:39,430 --> 00:01:44,220
You do realize that algol 68 can do the triple ref technique?

22
00:01:44,950 --> 00:01:48,030
Which previously has only been available to Assembler programmers?

23
00:01:48,030 --> 00:01:49,960
We said really can it yes?

24
00:01:49,960 --> 00:01:58,600
And yes, it can so what on earth is this well despite that technical name it's actually a pointers to pointers technique

25
00:01:59,160 --> 00:02:01,840
It's very powerful, and you might think well

26
00:02:02,220 --> 00:02:06,040
If you've got pointers why on Earth would you want pointers to pointers?

27
00:02:06,300 --> 00:02:12,060
well the strange thing about this and the really remarkable thing is that in the end it makes your

28
00:02:12,840 --> 00:02:14,840
procedure for doing things

29
00:02:14,880 --> 00:02:16,880
simpler not more complicated

30
00:02:16,950 --> 00:02:18,950
So what do we do? Well,

31
00:02:19,320 --> 00:02:20,840
We've got Burgers here

32
00:02:20,840 --> 00:02:26,720
And we're going to try and put it into the correct place just as before but instead of using a previous single level

33
00:02:26,850 --> 00:02:28,850
pointer and then having to say well

34
00:02:28,850 --> 00:02:32,210
It's all very well they can probe what the strings are

35
00:02:32,370 --> 00:02:36,920
But what you had is the problem was you've forgotten the way you came from

36
00:02:37,260 --> 00:02:41,689
And when you splice burgers into this list you need to know what's ahead of you

37
00:02:41,690 --> 00:02:45,469
But you need to know where you came from it's the previous blue box

38
00:02:45,470 --> 00:02:52,190
And if you're not careful you lose any way of getting on that, so if you look at my solution using traditional techniques

39
00:02:52,220 --> 00:02:58,120
I carefully keep a second pointer to remember where it came from this will no longer be necessary here we go

40
00:02:58,380 --> 00:03:01,660
We introduce a thing which I'm going to call tracer

41
00:03:02,120 --> 00:03:07,100
Tracers contents are of type pointer to pointer to things

42
00:03:07,160 --> 00:03:15,380
So the way you declare that in C, is it's a thing** because we declare things by their contents in C

43
00:03:15,870 --> 00:03:21,350
So inside tracer is a thing **. It's a pointer to a pointer to a thing so therefore

44
00:03:21,350 --> 00:03:28,860
It's absolutely right that you can make and look at this piece of chain here. That's to say that a pointer to a pointer

45
00:03:29,040 --> 00:03:33,940
Although it's a pointer is not the same thing as a single-level pointer to a thing

46
00:03:33,940 --> 00:03:36,920
It's perfectly okay for me to attach that to there

47
00:03:37,200 --> 00:03:42,520
And saying that the contents of tracer is a pointer to a pointer to a thing

48
00:03:42,920 --> 00:03:52,120
So I'm pointing to the address of a box which inside it has got a pointer to the thing which in this case is the head of the list.

49
00:03:52,360 --> 00:03:58,700
You basically use a technique known as casting of pointers, you can

50
00:03:59,240 --> 00:04:05,200
take a jump you can dereference you can follow the link you can either do it once to get to here or

51
00:04:05,670 --> 00:04:11,720
When you've got to there, you can jump the pointer again and get on to an actual thing at the head of the list

52
00:04:11,720 --> 00:04:15,049
So it's two steps removed. Yeah, so starting here

53
00:04:16,109 --> 00:04:20,029
You jump there you then you look along the black hose

54
00:04:20,420 --> 00:04:26,659
And you say I'm looking at something called beer, and I want to put in my thing here

55
00:04:26,940 --> 00:04:31,040
Which is burger and the idea of this is always that you insert ahead

56
00:04:31,480 --> 00:04:38,180
Alphabetically of where you are if that's what fits. No burger isn't earlier than beer in the alphabet

57
00:04:38,180 --> 00:04:43,459
It's later than beer so what you have to do now is to try and look ahead

58
00:04:43,710 --> 00:04:46,909
At the next thing which we will discover is chips now

59
00:04:46,910 --> 00:04:51,920
Here's the really cool thing about using the tracer pointer to pointer technique

60
00:04:51,920 --> 00:04:56,150
Is that if inspecting beers had no we've not gone far enough yet?

61
00:04:57,180 --> 00:05:04,669
What we now do instead of awkwardly moving our single level pointer down the list is take this blessed a great link and do

62
00:05:05,310 --> 00:05:07,310
Wait for it folks. This is

63
00:05:07,680 --> 00:05:10,909
Absolutely cool. Ok if I made tracer

64
00:05:11,430 --> 00:05:18,199
Originally point at a blue box because type wise it was right then it follows that all of these blue boxes

65
00:05:18,750 --> 00:05:24,920
In turn I can make it point through those to take a peek at the next one down in the list

66
00:05:24,990 --> 00:05:27,139
It's as simple as that you see: Type

67
00:05:27,140 --> 00:05:32,390
Theory by colors a green thing can point at the blue thing, but it can't point directly at a red thing

68
00:05:32,460 --> 00:05:34,460
So you look at this and you think?

69
00:05:34,650 --> 00:05:35,820
well

70
00:05:35,820 --> 00:05:37,710
by the

71
00:05:37,710 --> 00:05:42,469
Principle of colored Lego type theory if I can make the green thing point

72
00:05:42,470 --> 00:05:47,780
It's any blue thing I can do that, and then you say, but what does that imply in the program?

73
00:05:48,600 --> 00:05:56,119
It's implies in the program that you've got to be able to find the address of a blue box

74
00:05:56,120 --> 00:05:59,929
That's embedded within a particular thing structure

75
00:05:59,930 --> 00:06:05,570
And now look what you could then do is you start with tracer. You jump to that box

76
00:06:06,030 --> 00:06:12,289
But then you jump down the firemen's hose and you can take a look and you see that the next thing is chips

77
00:06:12,510 --> 00:06:14,150
You see wow

78
00:06:14,150 --> 00:06:16,150
I've just seen beer I'm

79
00:06:16,500 --> 00:06:20,630
Looking ahead by this sneaky technique, and I see chips. That's where I belong

80
00:06:20,660 --> 00:06:24,619
I want the burger thing in there, so this is completely magic

81
00:06:26,190 --> 00:06:31,460
But does it generalize? And does it work? And the answer is yes it does

82
00:06:32,220 --> 00:06:33,479
because

83
00:06:33,479 --> 00:06:35,379
by stepping

84
00:06:35,379 --> 00:06:42,088
One step backwards and going through an intermediate blue box before you do anything the crucial advantage

85
00:06:42,088 --> 00:06:46,180
It gives you is that having decided that burgers does belong in here?

86
00:06:46,180 --> 00:06:53,180
The problem we previously had of saying where the heck did I come from is solved because tracer is still pointing at it

87
00:06:53,199 --> 00:06:59,669
So you say to tracer let me dereference you once and I've then got the address of the box

88
00:06:59,669 --> 00:07:05,998
I want to alter so that it points at the burger thing and we end up just like we did I think last time

89
00:07:06,189 --> 00:07:08,939
but using the tracer technique of saying

90
00:07:09,580 --> 00:07:14,039
There goes burguer. We know we're in the right place, and if you remember

91
00:07:14,560 --> 00:07:15,610
we constructed

92
00:07:15,610 --> 00:07:19,199
Let's get this right do the long one first

93
00:07:20,319 --> 00:07:21,789
That one

94
00:07:21,789 --> 00:07:29,729
Goes here, and then finally you when you complete this splicing in operation by taking that

95
00:07:30,279 --> 00:07:36,569
Pointer the previously came off the beer thing turning it round and putting it on the blue box

96
00:07:37,180 --> 00:07:39,180
there, so

97
00:07:39,610 --> 00:07:47,039
Job done, but the big point is that you were able to keep half a finger on where you came from?

98
00:07:47,919 --> 00:07:53,818
That's the thing. At the same time as using that to look ahead and say yes, alphabetically I'm correct

99
00:07:53,820 --> 00:08:01,020
I'm after beer and before chips. It's like standing at a road sign and knowing that you're standing in London

100
00:08:01,040 --> 00:08:05,740
Yeah. But the road sign says Bristol. Yes. You're standing at the point to where it's pointing

101
00:08:05,760 --> 00:08:09,960
That we see both those things actually. 
Precisely so, that's right.

102
00:08:12,040 --> 00:08:16,820
So let's just take a quick look and honestly there's very daring of me

103
00:08:16,829 --> 00:08:21,599
I've actually put out the routine that does this in C and will provide this for you if

104
00:08:21,699 --> 00:08:27,388
You don't believe that this works just compile the program. I give you and run it and say wow it does work

