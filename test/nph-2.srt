1
00:00:00,000 --> 00:00:03,810
Let's say you want to transfer a file
from one computer to another and it is

2
00:00:03,810 --> 00:00:08,189
really important to know that it's
got there intact in one piece

3
00:00:08,189 --> 00:00:13,019
erm, you could send it multiple times and
then compare them all - but what generally

4
00:00:13,019 --> 00:00:16,499
gets used is something called a hash
algorithm.

5
00:00:18,140 --> 00:00:20,140
A hash algorithm is kind of

6
00:00:20,140 --> 00:00:23,540
like the check digit in a bar code on a
credit card. I think James Grime talked

7
00:00:23,550 --> 00:00:27,539
about this a long long time ago on Numberphile. The last digit in a bar code or on a

8
00:00:27,539 --> 00:00:31,560
credit card is determined by all the
other digits on it and if you change one

9
00:00:31,560 --> 00:00:32,640
of those digits

10
00:00:32,640 --> 00:00:35,640
the last one changes as well so as you
typed into a computer

11
00:00:36,210 --> 00:00:40,469
- you can know instantly if you've
missed a key somewhere

12
00:00:40,469 --> 00:00:45,570
so a hash algorithm is kind of like that
- but for an entire file that might be

13
00:00:45,570 --> 00:00:48,090
megabytes or gigabytes in size

14
00:00:48,090 --> 00:00:55,440
what it gives you is a code 16 or 32 or
64 characters generally hexadecimal

15
00:00:55,440 --> 00:01:01,350
basically just one long number expressed
in that way that is a "sum up" of

16
00:01:01,350 --> 00:01:03,149
everything that's in that file

17
00:01:03,149 --> 00:01:07,020
If you crushed it down if you do all
these manipulations to it and crush it down

18
00:01:07,020 --> 00:01:11,250
crush it down and crush it down and what it
comes out with this thing that says this is

19
00:01:11,250 --> 00:01:14,850
a summary of that file you can never
make it work backwards you can't pull

20
00:01:14,850 --> 00:01:17,610
that data back out but it's like a
signature

21
00:01:17,610 --> 00:01:21,810
it's like a confirmation that this file
is really who it says it is the simplest

22
00:01:21,810 --> 00:01:23,729
hash algorithm I can think of

23
00:01:23,729 --> 00:01:27,240
I would just be something like that's
five

24
00:01:27,240 --> 00:01:30,420
add up all the digits in the file

25
00:01:30,440 --> 00:01:37,490
which is 4, 9, 14, 23 that's not a good hash
algorithm for a few reasons

26
00:01:38,250 --> 00:01:43,619
hash algorithms have three main
requirements the first one is speed

27
00:01:43,619 --> 00:01:47,340
it's got to be reasonably fast it should
be able to churn through a big file in in a

28
00:01:47,360 --> 00:01:48,960
second or two at most

29
00:01:48,960 --> 00:01:53,460
but it also shouldn't be too quick if
it's too quick it's easy to break and

30
00:01:53,460 --> 00:01:55,380
I'll explain that later

31
00:01:55,380 --> 00:02:00,659
the second requirement is that if you
change one byte one bit anywhere in the

32
00:02:00,659 --> 00:02:04,710
file of the start of the middle at the
end then the whole hash should be

33
00:02:04,710 --> 00:02:08,250
completely different this is something
called the avalanche effect. If

34
00:02:08,250 --> 00:02:12,110
you're interested in how this is
achieved do look up the actual algorithms

35
00:02:12,110 --> 00:02:16,130
themselves. It would take me an
hour to explain vaguely how they work

36
00:02:16,130 --> 00:02:20,030
in a in a friendly way but if it's your
kind of thing do look it up but suffice

37
00:02:20,030 --> 00:02:25,520
it to say one bit gets flipped anywhere
in the message then the whole hash is

38
00:02:25,520 --> 00:02:30,200
completely and utterly different the
third requirement is that you've got to

39
00:02:30,200 --> 00:02:33,050
be able to avoid what are called hash
collisions

40
00:02:33,050 --> 00:02:36,680
this is where you have two documents
which have the same hash

41
00:02:37,250 --> 00:02:40,459
obviously there is a mathematical
principle called the pigeonhole

42
00:02:40,459 --> 00:02:48,590
principle you have it if you have 50
pigeons and 25 pigeonholes did you have

43
00:02:48,590 --> 00:02:51,230
to stuff two pigeons into one of the
pigeonholes that's a terrible analogy

44
00:02:51,230 --> 00:02:54,380
when you say it like this but if I could
explain it

45
00:02:54,380 --> 00:02:58,280
there are incredible numbers of
documents out that possible with the

46
00:02:58,280 --> 00:03:02,840
hash meanwhile it's just one fairly long
number that will be files out there

47
00:03:02,840 --> 00:03:07,550
which naturally have the same hash and
that's okay because the odds against it

48
00:03:07,550 --> 00:03:12,590
are so unlikely that we can deal with
that it's never going to happen

49
00:03:12,590 --> 00:03:14,000
naturally

50
00:03:14,000 --> 00:03:18,019
but if you can artificially create a
hash collision

51
00:03:18,019 --> 00:03:21,620
if you can say create a file and change
your name

52
00:03:21,620 --> 00:03:26,000
then we have a problem and that's that's
where security comes into these because

53
00:03:26,000 --> 00:03:29,000
if i can make a file that sums to a
certain hash

54
00:03:29,000 --> 00:03:34,100
then i can fake documents i can send
different things and have this signature

55
00:03:34,100 --> 00:03:35,299
match

56
00:03:35,299 --> 00:03:39,230
so let's say I have an important
document something that's i don't know, that's

57
00:03:39,230 --> 00:03:44,330
the "permission to to go to the moon" I don't know why I said that erm...

58
00:03:44,330 --> 00:03:47,720
oh yeah "permission to go to the moon"
let's say that - and it's got someone's name

59
00:03:47,720 --> 00:03:49,620
on it

60
00:03:49,620 --> 00:03:54,090
and that file is sent and along with it
through other channels comes this hash

61
00:03:54,090 --> 00:03:57,480
to verify that this is actually the
document

62
00:03:57,480 --> 00:04:01,739
now let's say I can intercept that file
and I can change it but because the hash

63
00:04:01,739 --> 00:04:06,030
algorithm is broken i can change it and
change the name and change the data and

64
00:04:06,030 --> 00:04:10,200
change whatever i can send someone else
to the moon because I can make this

65
00:04:10,200 --> 00:04:13,349
hash the same through carefully tweaking the
bytes

66
00:04:13,349 --> 00:04:17,669
now it's incredibly difficult to do that
in practice you'd want a massive file and a

67
00:04:17,669 --> 00:04:22,949
lot of computer code but there are old
hash algorithms like md5 which was used

68
00:04:22,949 --> 00:04:27,300
for many many years which now have these
collisions out in the wild and

69
00:04:27,300 --> 00:04:32,729
are considered broken because you can get a
file not document with text in but a

70
00:04:32,729 --> 00:04:36,120
computer code anything like that where
it's possible to send something

71
00:04:36,120 --> 00:04:39,449
malicious and have it come out with the
same hash

72
00:04:39,449 --> 00:04:44,301
so this is important this is where speed
comes it if the hash is too slow

73
00:04:44,301 --> 00:04:48,200
no one will want to use it but if the
hash is too fast if you can create new

74
00:04:48,210 --> 00:04:54,690
ones in a few processor cycles then you
can fairly easily create documents that

75
00:04:54,690 --> 00:05:00,180
match a particular hash. it is in a very
real sense an arms race as I said for

76
00:05:00,180 --> 00:05:05,190
many years md5 was the accepted
algorithm and it's still used for a few

77
00:05:05,190 --> 00:05:11,310
things but md5 is now thoroughly
broken because computers are fast enough

78
00:05:11,310 --> 00:05:16,410
and there are a few -sort-of- interesting
tricks you can use to try and create

79
00:05:16,410 --> 00:05:20,580
hash collisions deliberately. The other
problem with md5 is because it was used

80
00:05:20,580 --> 00:05:24,210
so much and it was used everywhere on
the web

81
00:05:24,210 --> 00:05:28,710
google has become an exceptionally good
resource for breaking them

82
00:05:28,710 --> 00:05:31,590
You wouldn't want to store a
password this way i'll talk about that

83
00:05:31,590 --> 00:05:32,490
in a later video

84
00:05:32,490 --> 00:05:37,620
don't use something like this for
storing passwords but people did many

85
00:05:37,620 --> 00:05:43,020
for many years people did & in a lot of cases
a word will be stored next to its md5

86
00:05:43,020 --> 00:05:48,930
hash for some reason if you type an md5
hash into google frequently the word it

87
00:05:48,930 --> 00:05:53,190
was hashing comes out which means that
for pretty much every word in the

88
00:05:53,190 --> 00:05:57,389
English language and a lot of other
passwords besides the md5 can be solved

89
00:05:57,389 --> 00:05:59,660
by typing it into google

90
00:05:59,660 --> 00:06:05,540
so md5 is is comprehensively,
constantly broken so everyone move to

91
00:06:05,540 --> 00:06:10,280
something called sha-1 and now there are
rumors that that might start to be

92
00:06:10,280 --> 00:06:13,940
broken soon if it hasn't already because
computers keep getting faster hash

93
00:06:13,940 --> 00:06:18,320
collisions are easier to generate so
everyone is moving to sha-2 which for

94
00:06:18,320 --> 00:06:23,750
the time being is secure. sha-3 is going through
the process of being ratified by all

95
00:06:23,750 --> 00:06:26,450
the agencies now and in a few years

96
00:06:26,450 --> 00:06:30,710
that'll be the standard - I mean
ultimately I should really

97
00:06:30,710 --> 00:06:33,620
emphasize this **Don't use this for
storing passwords** I'll talk about that in

98
00:06:33,620 --> 00:06:34,640
a later video

99
00:06:34,640 --> 00:06:39,470
these are used for verifying files for
verifying transmission and that's all

100
00:06:39,470 --> 00:06:40,760
they should be useful

101
00:06:40,760 --> 00:06:44,450
there is one last thing which is that
occasionally you will see

102
00:06:44,450 --> 00:06:47,630
download sites offering software who say
that

103
00:06:47,630 --> 00:06:50,750
here's the file we're going to send you
and click here to download it and if you

104
00:06:50,750 --> 00:06:51,740
want to be safe

105
00:06:51,740 --> 00:06:54,770
here's the hash of the file so you can
be sure it's the right one

106
00:06:54,770 --> 00:07:00,230
- that's a terrible idea I mean it will
verify you've gotta download intact but

107
00:07:00,230 --> 00:07:04,040
they're selling this as we guarantee
that this software is safe and you can

108
00:07:04,040 --> 00:07:09,260
check it against that hash - which is
a bad idea because if someone has been

109
00:07:09,260 --> 00:07:12,890
able to get into their website and
change the software they're sending its

110
00:07:12,890 --> 00:07:17,450
pretty trivial to change that hash as well so
they got that is hash algorithms that is

111
00:07:17,450 --> 00:07:22,460
taking a big chunk of data and turn it
into a small amount to verify it & in a

112
00:07:22,460 --> 00:07:26,990
later video i will talk about how that's
used and how that shouldn't be used for

113
00:07:26,990 --> 00:07:29,990
actually keeping things secure

114
00:07:32,260 --> 00:07:36,550
this episode of computer file was
brought to you by audible.com and you

115
00:07:36,550 --> 00:07:40,750
can go to audible.com / computerphile
and download a free book

116
00:07:41,440 --> 00:07:45,730
they've got a huge range that you can listen
to on all kinds of devices your phone or

117
00:07:45,730 --> 00:07:47,380
in the car things like that

118
00:07:47,380 --> 00:07:50,980
I was thinking about a book to recommend
and it made me think about the first

119
00:07:50,980 --> 00:07:55,210
audio book I ever listened to and that was
Treasure Island and I listened to it on a

120
00:07:55,210 --> 00:07:58,930
cassette next to my bed as i was going
to sleep each night I checked the

121
00:07:58,930 --> 00:08:01,570
audible website they do have treasure
island

122
00:08:01,570 --> 00:08:04,840
so that's my recommendation today why
don't you check it out

123
00:08:04,840 --> 00:08:10,390
audible.com/computerphile free book and
thanks to them for supporting our videos

