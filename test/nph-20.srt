1
00:00:00,000 --> 00:00:04,770
So, pipeline is basically a mechanism for
connecting the output of one program

2
00:00:04,770 --> 00:00:10,690
directly - conveniently - into the input of
another program. So that you can do, in

3
00:00:10,690 --> 00:00:16,590
effect, two stages of processing just by
saying "program-1, vertical bar - that's the

4
00:00:16,590 --> 00:00:20,939
pipeline symbol - second program". And what
that does is to start both programs and

5
00:00:20,939 --> 00:00:25,900
take the output quietly from the first
one and stick it into the input of the

6
00:00:25,900 --> 00:00:32,540
second one and then of course you can
have multiple of those. 

7
00:00:32,540 --> 00:00:37,010
Before that, the way that people connected programs --
but first I think they often didn't think of

8
00:00:37,010 --> 00:00:41,230
connecting programs at all; you thought
of each program as its own thing, and it

9
00:00:41,230 --> 00:00:43,000
would produce some output.

10
00:00:43,000 --> 00:00:48,000
>>Sean: So you might put a few numbers into it
by punch card or whatever, it would sort them,

11
00:00:48,000 --> 00:00:53,000
you'd take that output, and then take that one
literally ... connect the next program.

12
00:00:53,000 --> 00:00:53,789
>>BWK: Right, yeah.

13
00:00:53,789 --> 00:00:59,070
You do that, as it were manually. Unix had the
idea of file redirection, which made that

14
00:00:59,070 --> 00:01:03,750
syntactically easy. The new invention was
to say, "Hey wait a minute, we could put an

15
00:01:03,750 --> 00:01:07,960
operator to do that right in the shell," the
command line interpreter.

16
00:01:07,960 --> 00:01:13,290
And then that made it a lot easier to do,
and it also encouraged people to, if the

17
00:01:13,290 --> 00:01:17,729
mechanism wasn't clean already, retrofit
cleanliness into the implementation.

18
00:01:17,729 --> 00:01:22,840
I think it is a new idea with UNIX as
far as I know.  I have somewhere in my

19
00:01:22,840 --> 00:01:28,200
collection of historical documents a
page that Doug McIlroy wrote in 1964

20
00:01:28,200 --> 00:01:32,680
saying what we want to do is a mechanism
for screwing programs together... connecting

21
00:01:32,680 --> 00:01:36,170
programs together just like screwing
pieces of garden hose together, and that's

22
00:01:36,170 --> 00:01:41,409
the model.  And then I think it was
probably three or four years later and I

23
00:01:41,409 --> 00:01:47,119
don't know how it came about, but it just
got done, and literally in a very very short

24
00:01:47,119 --> 00:01:48,710
period of time.

25
00:01:48,710 --> 00:01:52,500
>>Sean: So basically the pipe is like 
pumping water into a garden...

26
00:01:52,500 --> 00:01:56,000
>>BWK: Yeah. And you just screw on another
length of garden hose if you want to do

27
00:01:56,000 --> 00:01:57,810
further processing.

28
00:01:57,810 --> 00:01:59,000
Garden hose doesn't process
in that same sense,

29
00:01:59,000 --> 00:02:02,979
but it's a pipeline in the sense that you see in 
certain kinds of manufacturing processes,

30
00:02:02,979 --> 00:02:05,900
or something like that, where there's just
stages of processing.

31
00:02:05,900 --> 00:02:09,000
>>Sean: What's the benefit of that
rather than just writing one big

32
00:02:09,000 --> 00:02:10,640
massive program that just does everything
for you?

33
00:02:10,640 --> 00:02:14,350
>>BWK: Well, first you don't have to write the
one big massive program.  You've got

34
00:02:14,350 --> 00:02:19,959
existing smaller programs that may
already do parts of the job.  And having

35
00:02:19,959 --> 00:02:23,630
smaller programs is better than having
massive programs, so that's one thing.

36
00:02:23,630 --> 00:02:27,459
Another is that it's possible that the
amount of data you're processing would not

37
00:02:27,459 --> 00:02:32,560
fit if you stored it in a file, if you
took the output of one program and had

38
00:02:32,560 --> 00:02:36,590
to store it totally before you put it
into the next program.  It might not fit

39
00:02:36,590 --> 00:02:40,430
because remember we're back in the days
when discs on these things had, if you

40
00:02:40,430 --> 00:02:46,150
were lucky, a megabyte or two of data, not
a gigabyte or a terabyte, but a megabyte. And so you

41
00:02:46,150 --> 00:02:50,989
couldn't instantiate necessarily the
output of a program before passing it on

42
00:02:50,989 --> 00:02:55,140
to the next program.  So the pipeline
never had to instantiate the whole

43
00:02:55,140 --> 00:02:57,000
output.
>>Sean: So by "instantiate", that's "store," is it?

44
00:02:57,000 --> 00:02:59,000
Yes, store it. A big word for storing.

45
00:02:59,000 --> 00:03:03,200
And so that meant so that you could kind of just

46
00:03:03,200 --> 00:03:06,400
sneak things through without having to
do this

47
00:03:06,400 --> 00:03:11,120
along the way.  So that would be another example.
And then it was just keeping track of the

48
00:03:11,120 --> 00:03:15,000
intermediate files could be a nuisance,
cleaning up the mess afterwards -- all of

49
00:03:15,000 --> 00:03:17,000
those things went away with the pipeline
mechanism where you just said,

50
00:03:17,000 --> 00:03:21,500
"Hey, this is what I want to do:
this, this, this, in order."

51
00:03:21,500 --> 00:03:24,000
>>Sean: Give me one result at the end of it?
>>BWK: Give me one result at the end of it.

52
00:03:24,000 --> 00:03:29,750
>>Sean: Is that something that's still used today ...?
>>BWK: Oh, absolutely. It's still fundamental mechanism.

53
00:03:29,750 --> 00:03:34,470
You use it all the time. You don't even think
about it at this point.  It's just part of it.

54
00:03:34,470 --> 00:03:39,960
It took a while to get retrofitted I
think into let's say Windows but it's an absolutely

55
00:03:39,960 --> 00:03:45,330
integral part of any UNIX-based system,
has been since, since the late sixties.

56
00:03:45,330 --> 00:03:52,240
Just by taking existing programs, tools
like grep and wc and sort, and somewhere

57
00:03:52,240 --> 00:03:55,760
in there I could throw in AWK if I
wanted to do slightly more

58
00:03:55,760 --> 00:04:00,820
complicated kind of processing.  So all of
these things are using UNIX tools with

59
00:04:00,820 --> 00:04:04,280
glued-together pipelines in ways that
were not thought of in the original

60
00:04:04,280 --> 00:04:07,260
design.  That's the critical
observation, and that's the reason why these

61
00:04:07,260 --> 00:04:12,370
little programs are often much more
useful than the very big, monolithic

62
00:04:12,370 --> 00:04:16,510
one which does whatever it does, but
nothing else.  It's definitely an instance

63
00:04:16,510 --> 00:04:17,850
of "don't reinvent the wheel."

64
00:04:17,850 --> 00:04:23,030
Other people have done a lot of useful things
for you, and the ingenuity and often a lot

65
00:04:23,030 --> 00:04:26,860
of fun of just saying, "Hey, I don't have
to do anything here except glue

66
00:04:26,860 --> 00:04:30,000
together things that somebody else did
for me already."

67
00:04:30,000 --> 00:04:32,000
>> Sean: I may be getting the wrong end 
of the stick - or another cliche will come to me

68
00:04:32,000 --> 00:04:36,870
in a minute - but is this where libraries come from then? 
>> BWK: So you can think of 

69
00:04:36,870 --> 00:04:42,730
programs like grep and wc and sort as in
effect libraries, but libraries of programs

70
00:04:42,730 --> 00:04:48,280
that stand alone, rather than libraries
of code which is linked, more or less

71
00:04:48,280 --> 00:04:54,890
permanently, with other pieces of code.
So it's a library mechanism but in

72
00:04:54,890 --> 00:05:03,790
some ways at a higher level, and the programs 
are really independent of each other.

