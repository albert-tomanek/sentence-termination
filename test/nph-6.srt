1
00:00:00,000 --> 00:00:05,940
[There's] a lot of interesting stuff both from the
point of view of the content but also

2
00:00:05,940 --> 00:00:12,450
the historical context between, y' know
"When were `for' loops invented?". Well

3
00:00:12,450 --> 00:00:17,250
that's what Algol called them but prior
to that FORTRAN called them DO loops.

4
00:00:17,250 --> 00:00:22,380
And prior to that they existed in assembler.
So, first of all, what's the history and

5
00:00:22,380 --> 00:00:27,029
what does it get you when you can do
loops, but when do you run out of steam,

6
00:00:27,029 --> 00:00:34,230
even with loops, and you have to use this
shock! horror! Pure Mathematicians thing -

7
00:00:34,230 --> 00:00:42,510
that computer scientists have to learn
about - recursion?! It was a real culture

8
00:00:42,510 --> 00:00:49,289
shock, it really was, in the roughly
1940s, 1950s to suddenly find

9
00:00:49,289 --> 00:00:55,890
out that what the theoreticians had been
drivelling on about for years - about recursive

10
00:00:55,890 --> 00:01:01,680
functions in mathematics - actually was of
massive, massive importance for computer

11
00:01:01,680 --> 00:01:07,560
science. Back in the '40s and early
'50s it was all Assembler - or a

12
00:01:07,560 --> 00:01:10,890
slightly dressed-up thing called a macro
assembler, where you can have little

13
00:01:10,890 --> 00:01:18,659
routines full of, y' know, packaged
assembler instructions which could be

14
00:01:18,659 --> 00:01:22,770
called up, as and when needed. So, that
sort of served people for quite some

15
00:01:22,770 --> 00:01:31,070
time. But probably one of the first
high-level languages to introduce loops

16
00:01:31,070 --> 00:01:37,140
was good old FORTRAN [shows textbook]. Even though 
that was published in '65 Fortran itself goes

17
00:01:37,140 --> 00:01:43,560
back, I think, for almost ten years before
that. It was invented by John Backus and

18
00:01:43,560 --> 00:01:49,409
a large team of people at IBM in the
1950s. Many of you will know it. It's an

19
00:01:49,409 --> 00:01:56,909
excellent language for engineering and
scientific calculations. It is low level.

20
00:01:56,909 --> 00:02:05,009
I mean, when you look at the nature of a
FORTRAN loop it's almost like doing it

21
00:02:05,009 --> 00:02:09,660
in assembler - but not quite. They didn't
call them for loops - they called them DO loops.

22
00:02:09,660 --> 00:02:13,700
What I'm saying here is - you package all this
up - where you're saying

23
00:02:13,700 --> 00:02:17,640
repeat the following sequence of
instructions, which I've done with my

24
00:02:17,640 --> 00:02:23,310
wavy lines here. Keep doing them until
you hit the statement with a numeric

25
00:02:23,310 --> 00:02:31,079
label on it of 180. The loop back from
the statement labelled 180, back up to

26
00:02:31,079 --> 00:02:36,480
here to increment the loop counter, which
you're all familiar with in languages

27
00:02:36,480 --> 00:02:42,569
like C. It wasn't done, as it would
be in C, by saying: "Here's my block of

28
00:02:42,569 --> 00:02:47,040
stuff to be repeated it's inside these
curly braces". Here you can see it's a lot

29
00:02:47,040 --> 00:02:51,299
more like assembler, a lot more low-level.
I mean there's nothing magic about "180"; it could

30
00:02:51,299 --> 00:02:57,780
be "72"; it depended on your labelling
system. Implicitly here, in a simple

31
00:02:57,780 --> 00:03:01,859
thing like this, you'd start off [with the counter] 
at one and every time I returned back here it would

32
00:03:01,859 --> 00:03:08,459
reset [the counter] to be 2, 3, 4 and so on up to
and including 10. It's comforting for

33
00:03:08,459 --> 00:03:12,120
those who were coming from assembler
into a higher-level language to see

34
00:03:12,120 --> 00:03:16,530
something that was only slightly higher
level, in sophistication, than assembler was.

35
00:03:16,530 --> 00:03:20,459
How did loops become more "powerful",
if you like?

36
00:03:20,459 --> 00:03:26,609
Well, again, even in assembler and even in
FORTRAN, there's no reason why you

37
00:03:26,609 --> 00:03:33,840
couldn't have a loop within a loop. So I
might have, outside of all this code, yet

38
00:03:33,840 --> 00:03:44,189
another layer of DO. What shall we say:
"DO 200 J = 1, 20". So, there might

39
00:03:44,189 --> 00:03:49,620
be some more statements between 180 and
200, who knows, but again, you see, a

40
00:03:49,620 --> 00:03:55,949
numeric label. And can see what's
happening is that for every setting of J,

41
00:03:55,949 --> 00:04:00,959
which will start at 1 and go up to 20,
for every single one of those J settings

42
00:04:00,959 --> 00:04:06,120
the inner loop will be running through
the complete spectrum of settings of I

43
00:04:06,120 --> 00:04:11,849
going from 1 to 10. So you will have 200
locations [that] are being affected here.

44
00:04:11,849 --> 00:04:16,169
Basically going through the rows and
columns of a matrix. All sorts of

45
00:04:16,169 --> 00:04:20,570
calculations in physics, chemistry and
particularly engineering just rely on

46
00:04:20,570 --> 00:04:25,919
two-dimensional arrays full of numbers
- either integers or scientific numbers

47
00:04:25,919 --> 00:04:28,010
with a decimal point. and so on. Even hard-core

48
00:04:28,010 --> 00:04:31,550
assembly programmers had to admit if you were
doing heavy scientific programming it was

49
00:04:31,550 --> 00:04:35,210
nice to be a little bit more abstract
and to have this sort of facility

50
00:04:35,210 --> 00:04:42,979
available to you. Now you might say: "Well,
what came along to spoil the party then ?"

51
00:04:42,979 --> 00:04:48,350
or "How did people realize that this was
wonderful but not quite enough?" 

52
00:04:48,350 --> 00:04:52,310
The compiler of course has got to be
tolerant and has got to be capable of

53
00:04:52,310 --> 00:04:58,040
compiling nested DO loops correctly but
how deep would it let you nest them?

54
00:04:58,040 --> 00:05:02,870
Well, I'm guessing, I would suspect that
the early FORTRAN compilers probably

55
00:05:02,870 --> 00:05:07,970
wouldn't allow you to go more than about
10 deep, maximum. And I think you and I

56
00:05:07,970 --> 00:05:12,260
Sean have just been looking up what are the
current limits in C?  I seem to remember

57
00:05:12,260 --> 00:05:18,110
the earliest `gcc' was something like 32
But Ithink we looked up this ... some C++

58
00:05:18,110 --> 00:05:24,650
nowadays allows you to do nested loops
256 deep! And, of course, there are

59
00:05:24,650 --> 00:05:30,080
multi-dimensional problems that might
actually need that, because it it doesn't

60
00:05:30,080 --> 00:05:34,760
take much knowledge of higher maths to
realize if you've got a loop within a loop

61
00:05:34,760 --> 00:05:40,099
the outer loop goes around n times; the
inner loop is going around n times, you

62
00:05:40,099 --> 00:05:45,410
are then coping with an n-squared
problem. If you put the third loop inside

63
00:05:45,410 --> 00:05:51,080
the other two you're coping with a cubic,
three-dimensional, problem. So what we're

64
00:05:51,080 --> 00:05:57,080
saying is all these multi-dimensional
polynomial-going-on-exponential problems,

65
00:05:57,080 --> 00:06:01,820
that come up quite naturally, you can
cope with them in nested for-loops so

66
00:06:01,820 --> 00:06:09,740
long as they don't need to be more than
power-32 or power-256 or whatever it is. 

67
00:06:09,740 --> 00:06:13,580
And you think, well, that should be enough for
anybody! There's these multi-dimensional

68
00:06:13,580 --> 00:06:18,710
problems you can just do them by nesting
`for' loops and surely [a depth of] 256 is

69
00:06:18,710 --> 00:06:23,500
enough for anybody? What kind of problem
wouldn't it be enough for? Well, a lot of

70
00:06:23,500 --> 00:06:30,979
theoretical computer scientists of my
knowledge amused me greatly when - those of

71
00:06:30,979 --> 00:06:37,880
them that will own up to this - back in
the 60s. People started going to lectures

72
00:06:37,880 --> 00:06:42,210
from mathematicians, theoreticians, people concerned

73
00:06:42,210 --> 00:06:48,840
with "Godel Computability" and so on. And
of course, those sort of people, were very

74
00:06:48,840 --> 00:06:54,510
familiar indeed, at a mathematical level,
with Ackermann's function. Now, as you know -

75
00:06:54,510 --> 00:07:00,360
you and I - we've done that one: 
>> Sean: Was that "The most difficult ... ?"
>> DFB:  "The most difficult number to compute, question mark"

76
00:07:00,360 --> 00:07:06,570
<Ackermann video insert>
"We set this going four weeks ago
nearly now the first few are vanished ..."
</Ackermann video insert>

77
00:07:06,570 --> 00:07:11,370
So what made it so difficult?
well you write down Ackermann's function and

78
00:07:11,370 --> 00:07:19,620
it very clearly ends up with routines
calling themselves recursively in a very

79
00:07:19,620 --> 00:07:24,840
very complicated way. Now I think your
average sort of engineer would be happy

80
00:07:24,840 --> 00:07:29,160
to say that there's this thing called `factorial'
which is 5 times 4 times 3 times 2 times 1,

81
00:07:29,160 --> 00:07:33,780
or whatever. And you could do that in a
loop as well as doing this fancy

82
00:07:33,780 --> 00:07:41,220
recursion thing, but a lot of
theoreticians admitted to me they saw a

83
00:07:41,220 --> 00:07:49,170
Ackermann's function and said: "I could try that
out in FORTRAN !". Now what they perhaps

84
00:07:49,170 --> 00:07:52,350
didn't realize - but it became famous by 1960 - is:

85
00:07:52,350 --> 00:07:57,960
FORTRAN is wonderful, but original
FORTRAN did not do user-level recursion

86
00:07:57,960 --> 00:08:02,640
You could write a thing called ACK.
You could actually get it to call itself

87
00:08:02,640 --> 00:08:07,590
in FORTRAN. But you might have been
expecting that every time it called

88
00:08:07,590 --> 00:08:12,900
itself it would lay out a data area for
each recursive call they're called "stack

89
00:08:12,900 --> 00:08:16,800
frames" - we know that now. You get lots of
stack frames, one on top of another and

90
00:08:16,800 --> 00:08:20,880
as you come back through the recursion
they're deleted and thrown away and you

91
00:08:20,880 --> 00:08:26,040
climb back into your main program.
FORTRAN doesn't do that. It sets

92
00:08:26,040 --> 00:08:30,660
aside one stack frame. You keep calling
yourself recursively it just tramples

93
00:08:30,660 --> 00:08:35,610
in its muddy gumboots over all your
data area and you end up with total

94
00:08:35,610 --> 00:08:40,380
garbage. It no more gives you values of the
Ackermann function than fly to the moon!

95
00:08:40,380 --> 00:08:47,370
And people said: "I then realized the
importance of having user-level

96
00:08:47,370 --> 00:08:52,140
recursion, in programming languages, to
cope with those really hard problems

97
00:08:52,140 --> 00:08:56,430
that fell outside nested for-loops".
Algol was famous in that its routines

98
00:08:56,430 --> 00:09:01,440
could call themselves recursively and
could get the right answer and, for

99
00:09:01,440 --> 00:09:07,470
limited low-order values of Ackermann's
function - very slow, very slow indeed - but

100
00:09:07,470 --> 00:09:11,520
it would come out with the right answer.
>> Sean: Is there any need to think of an example of a

101
00:09:11,520 --> 00:09:15,960
problem, or program, because Ackermann
feels to me like it's the test-bed.

102
00:09:15,960 --> 00:09:19,980
You know, when you're testing out a
motor-car you might take it on the track

103
00:09:19,980 --> 00:09:23,490
and see how fast it can go.
But in day-to-day life that car might

104
00:09:23,490 --> 00:09:29,070
only get half that speed. What's the
real-world kind of equivalent? Is there

105
00:09:29,070 --> 00:09:34,230
such a thing?
>> DFB: Real world equivalent?
>> Sean: ... of something that might need to use

106
00:09:34,230 --> 00:09:38,910
recursion ... ?
>> DFB: ... of that complexity? Not many things

107
00:09:38,910 --> 00:09:44,640
is the answer to that. I mean, yes, it's
true that Ackermann, as you know, was David

108
00:09:44,640 --> 00:09:48,930
Hilbert's research student. And the
challenge was on to find something that

109
00:09:48,930 --> 00:09:55,590
was so innately recursive that - remember
it was "generally recursive", they called it -

110
00:09:55,590 --> 00:10:00,150
as opposed to "primitive recursive". And
simple things like factorial and indeed

111
00:10:00,150 --> 00:10:05,640
indeed Fibonacci, are primitive recursive.
So I think you're right that you really

112
00:10:05,640 --> 00:10:09,540
are just making the point that
eventually there are things that will

113
00:10:09,540 --> 00:10:17,540
kill you. I think the question in the
middle is: "Is there something out there -

114
00:10:17,540 --> 00:10:23,910
pieces of program you need to write -
where non-trivial recursion, in a sense,

115
00:10:23,910 --> 00:10:29,640
is needed but not quite to the
horrendous degree that Ackermann did. And the

116
00:10:29,640 --> 00:10:37,740
answer is:  "Yes, compilers is where it hit
people".  Because although early FORTRAN

117
00:10:37,740 --> 00:10:43,080
did not provide user-level recursion, for
you and me, nevertheless John Backus and

118
00:10:43,080 --> 00:10:47,560
his team implemented it in the middle
1950s I think at IBM.

119
00:10:47,560 --> 00:10:53,410
And Backus wrote articles afterwards
basically saying: "We didn't know enough

120
00:10:53,410 --> 00:10:57,340
about recursion and even though we
didn't provide it for the users of our

121
00:10:57,340 --> 00:11:02,080
language, boy did we need it in the
compiler! And

122
00:11:02,080 --> 00:11:08,190
we ended up inventing it in all but name"
The syntactic structures of what is

123
00:11:08,190 --> 00:11:13,150
legal, in a language, even at the level
just of arithmetic statements can be

124
00:11:13,150 --> 00:11:17,500
quite recursive. Because you end up with
brackets within brackets within brackets

125
00:11:17,500 --> 00:11:22,839
all with a multiplier outside. And which
order do you do the brackets in? And, you

126
00:11:22,839 --> 00:11:28,540
know, how how many levels of bracket
nesting can you have. And if you don't

127
00:11:28,540 --> 00:11:34,660
get things sorted out correctly then
you'll get the wrong answer. But once again

128
00:11:34,660 --> 00:11:40,960
the problem could be that your users
would come up to you and present you

129
00:11:40,960 --> 00:11:46,390
with a problem just designed to test out
your compiler, and whether it was robust

130
00:11:46,390 --> 00:11:50,410
enough to be able to cope with a high
degree of nesting even just in

131
00:11:50,410 --> 00:11:58,540
arithmetic statements. So by 1960 in
Algol, yeah, the there were enough users, at

132
00:11:58,540 --> 00:12:03,550
the user level, who could see that a
modicum of recursion, perhaps more

133
00:12:03,550 --> 00:12:08,530
complicated than factorial but not quite
up to full Ackermann capabilities would be

134
00:12:08,530 --> 00:12:15,940
very nice indeed to have within your language. 
<trailer for EXTRA BITS video>
Again referring back to that

135
00:12:15,940 --> 00:12:21,310
original video, I had a lot of really
interesting mail from various people who

136
00:12:21,310 --> 00:12:28,420
said to me: "OK, you said that this is an
innately recursive problem and it just

137
00:12:28,420 --> 00:12:33,000
had to have general recursion capabilities? 
Well I .... "
</end of trailer>

