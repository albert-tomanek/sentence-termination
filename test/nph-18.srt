1
00:00:00,000 --> 00:00:04,140
>> Sean: We are kicking off a bit of a 
mini-series on things that programmers find

2
00:00:04,140 --> 00:00:11,400
essential, and it'd be great to find out
what you think is essential.
>> BWK: Sure.  Lots of

3
00:00:11,400 --> 00:00:14,460
things that are essential.  Do you want to
narrow the scope of that a little bit?

4
00:00:14,460 --> 00:00:20,160
I mean, coffee is essential.
>> Sean: So within programming, I mean, you want to tell us

5
00:00:20,160 --> 00:00:27,180
about some kind of array -- is that true?
>> BWK: Yes, I guess I would say that I wanted

6
00:00:27,180 --> 00:00:31,170
to talk primarily about associative
arrays which are in other contexts

7
00:00:31,170 --> 00:00:35,309
called hash tables or sometimes in a
language like Python they're called

8
00:00:35,309 --> 00:00:42,570
dictionaries.  The idea is an array which
has as its subscripts not integers from

9
00:00:42,570 --> 00:00:48,239
0 or 1 up to something, but rather any
arbitrary thing is the subscript of the

10
00:00:48,239 --> 00:00:52,379
array.  And so this gives you a great deal
of flexibility; you can build really

11
00:00:52,379 --> 00:00:55,680
interesting things with associative
arrays.  I will call them associative

12
00:00:55,680 --> 00:01:00,449
arrays.  If you think hash table if you're
a Java or JavaScript programmer, let's

13
00:01:00,449 --> 00:01:06,890
say, or if you think dictionary for
Python people, it's the same basic thing.

14
00:01:06,890 --> 00:01:11,820
So the idea is instead of having
subscripts which go from let's call it

15
00:01:11,820 --> 00:01:16,680
zero up to something, you have arbitrary
subscripts, and for simplicity let's just

16
00:01:16,680 --> 00:01:23,310
call them strings of characters, just
text: words like "Sean" or "Dave" or "Steve". 
>> Sean: So

17
00:01:23,310 --> 00:01:29,610
let's get people context there -- we have
our our film crew in full effect.

18
00:01:29,610 --> 00:01:34,049
So if I understand rightly, then that
means instead of keeping track on you

19
00:01:34,049 --> 00:01:38,759
know number 13 was the number that I
gave to the number of whatever then instead

20
00:01:38,759 --> 00:01:43,229
it can say nails or screws or whatever 
>> BWK: Correct.  One of the classic

21
00:01:43,229 --> 00:01:48,530
examples that this thing is that you
want to keep track of, for example, oh

22
00:01:48,530 --> 00:01:53,189
your groceries that you might buy.  So we
are buying things like beer and pizza

23
00:01:53,189 --> 00:01:59,070
and coffee and chips, this sort of
thing.  And so what you'd like to do is

24
00:01:59,070 --> 00:02:04,649
have an array where the subscripts are
beer and pizza and chips and coffee or

25
00:02:04,649 --> 00:02:10,800
whatever else.  And then the values of
those array elements can be whatever you

26
00:02:10,800 --> 00:02:15,860
want, but they might be for example
how much you spent on beer and pizza and

27
00:02:15,860 --> 00:02:20,360
coffee.  And so you could write a very
simple program that would simply say "I

28
00:02:20,360 --> 00:02:26,659
have pizza ten pounds, beer 20 pounds, coffee two

29
00:02:26,659 --> 00:02:33,260
pounds, beer 20 pounds" and I would like to
just add up all of the things for the

30
00:02:33,260 --> 00:02:37,310
pizza, all of the things for the beer
separately, and so on.  And so I would

31
00:02:37,310 --> 00:02:43,599
simply add that, add numeric values to
what you see in the array, add those

32
00:02:43,599 --> 00:02:48,709
subscripts that are instead of being
numbers are just the strings: beer, pizza.

33
00:02:48,709 --> 00:02:55,040
I think it's a lot easier in many
respects and so easy to use this stuff,

34
00:02:55,040 --> 00:02:58,790
very natural I think for many people, and
it turns out the implementation is

35
00:02:58,790 --> 00:03:02,390
actually quite simple as well.  It took I
imagine in computer science a while for

36
00:03:02,390 --> 00:03:05,900
people to realize how to do it well and
now I think people really do understand

37
00:03:05,900 --> 00:03:12,530
how to make effective, efficient
implementations of associative arrays.  So

38
00:03:12,530 --> 00:03:16,790
I don't know whether I could perhaps
draw a picture that would be useful that

39
00:03:16,790 --> 00:03:22,370
would give somebody an idea of how do
this.  Let me try.  
>> Sean: Sure.
>> BWK: Let's suppose I

40
00:03:22,370 --> 00:03:25,910
have an array, let's just call it X
because I have no imagination and I

41
00:03:25,910 --> 00:03:30,380
would like to say, okay, the element here
is pizza.  And I could say how much pizza

42
00:03:30,380 --> 00:03:34,639
did I buy?  Well 20 pounds worth of pizza or
something like that, or maybe it was 20

43
00:03:34,639 --> 00:03:41,180
pizzas -- doesn't matter.  And so I can say X
of beer equals 10, and so on.  And then I

44
00:03:41,180 --> 00:03:49,010
could later on say well, X of beer equals X
of beer plus 15.  So this is the way

45
00:03:49,010 --> 00:03:52,400
that you would use these in a program
with all of the advantages and they

46
00:03:52,400 --> 00:03:56,540
would look just like the subscripts that you
would find if these were integers

47
00:03:56,540 --> 00:04:00,410
instead, like pizza were 1 and beer were 2
and so on, but this is a lot more natural.

48
00:04:00,410 --> 00:04:05,000
So that's kind of the use of this.  How
would you actually build one of these

49
00:04:05,000 --> 00:04:10,819
things?  The internal representation is
often, and this is where really hash

50
00:04:10,819 --> 00:04:15,319
table is probably the right way to think
of it, suppose we have in memory

51
00:04:15,319 --> 00:04:19,489
somewhere an honest to god array of the
sort that we're familiar with where the

52
00:04:19,489 --> 00:04:25,879
subscripts go from 0, 1, 2,
dot dot dot up to whatever, some number

53
00:04:25,879 --> 00:04:31,159
N like this.  This is going to be the
hash table where you can find things.  And

54
00:04:31,159 --> 00:04:36,080
what happens is if I want to find the
particular place in this table where

55
00:04:36,080 --> 00:04:41,629
elements associated with let's say pizza
are stored, then what I do is I take pizza

56
00:04:41,629 --> 00:04:47,870
and I run it through a hash which
scrambles it up in some way and produces

57
00:04:47,870 --> 00:04:53,569
a number which is between 0 and in this
case let's call it N.   OK?  So the

58
00:04:53,569 --> 00:04:57,530
hashing takes this, scrambles it, you
could imagine doing just by adding up

59
00:04:57,530 --> 00:05:02,360
the letters, treat them as numbers, add
them up, and you get some value, and then

60
00:05:02,360 --> 00:05:07,250
you use the modulus function to reduce
it so that it's in this range.  That tells

61
00:05:07,250 --> 00:05:11,659
you the pizza stuff is going to be
stored here, but you don't store it in the

62
00:05:11,659 --> 00:05:16,430
table; what you do is that you have
typically something that says I'm pizza

63
00:05:16,430 --> 00:05:20,960
and my current value is 20.  This is
getting a little too small.  And this

64
00:05:20,960 --> 00:05:26,000
simply points to it.  Okay?  So now somebody
comes along later on and wants to say

65
00:05:26,000 --> 00:05:31,340
where is Pizza stored in the array?  What
I do is same process I say ok take

66
00:05:31,340 --> 00:05:35,210
pizza, run it through the hash function,
gives me a number, let's call it in this

67
00:05:35,210 --> 00:05:40,699
case 2, and I say oh ok the pizza guy is
there.  Okay?  So that's the basic thing. But

68
00:05:40,699 --> 00:05:45,940
what happens if something else by
accident of the hashing collides with

69
00:05:45,940 --> 00:05:49,580
pizza.  Maybe beer collides with pizza.  I
mean they go well together.

70
00:05:49,580 --> 00:05:54,080
So what happens there is that the data
structure is really a linked list and so

71
00:05:54,080 --> 00:06:00,860
if it turns out that by accident beer
also, when run through the hash, comes out

72
00:06:00,860 --> 00:06:05,569
as 2, so this is called a hash collision.
So what you have to do there is to say

73
00:06:05,569 --> 00:06:08,930
well there's really a data structure a
little more complicated and it points off

74
00:06:08,930 --> 00:06:14,719
to something that says beer, which is at
this point 25 let's say.  And so when I

75
00:06:14,719 --> 00:06:19,430
want to look up beer, I simply start at
the front here and I say pizza no that's

76
00:06:19,430 --> 00:06:24,440
not beer; ah there's beer, and now I'm all
set.  And there's also something that says

77
00:06:24,440 --> 00:06:27,469
there's no more in this list.  And if
another thing comes along that happens

78
00:06:27,469 --> 00:06:33,229
to also collide with this, then no
problem, we just make the list longer.  So

79
00:06:33,229 --> 00:06:38,360
then what you have to do, this hashing
function here has to have the property

80
00:06:38,360 --> 00:06:41,599
that you give it a bunch of different
things like beer, pizza, coffee, coke,

81
00:06:41,599 --> 00:06:47,270
whatever, it should spread those things
fairly uniformly across the table so

82
00:06:47,270 --> 00:06:50,930
that you don't get everybody piling up
in this particular element but you get

83
00:06:50,930 --> 00:06:55,849
mostly these little chains of things
about the same length.  And that means

84
00:06:55,849 --> 00:07:00,439
that the access to the information in
this table, it's sort of constant time.

85
00:07:00,439 --> 00:07:04,669
You do the hash function, it tells you
where to go, and there's usually only one

86
00:07:04,669 --> 00:07:09,379
or two elements in any given chain of
things that happen to have the same hash

87
00:07:09,379 --> 00:07:13,639
value.  You know, suppose that this is
small, maybe N is only 10 and you've got

88
00:07:13,639 --> 00:07:17,060
hundreds of different things in the
table, N has to be bigger.  And so what

89
00:07:17,060 --> 00:07:20,599
you can do at that point is you can
actually grow the table.  You can say okay

90
00:07:20,599 --> 00:07:24,319
let's just rehash everything in sight
and make a new table.  I'm going to switch

91
00:07:24,319 --> 00:07:29,689
to a new page here so we could see it.
>> Sean: fanfold is going to throw you now.

92
00:07:29,689 --> 00:07:32,629
>> BWK: Fanfold has thrown me.
I remember fan-fold from my youth.

93
00:07:32,629 --> 00:07:37,699
So here we have this hash table that
went from 0 up to some old value of N

94
00:07:37,699 --> 00:07:43,430
like this and we've got things in it
like my pizza and my beer and so on.  And

95
00:07:43,430 --> 00:07:46,849
suppose that it's gotten very crowded at
this point; if N was small and I've got

96
00:07:46,849 --> 00:07:50,719
lots of things, it's going to get crowded
necessarily.  So what I can simply do is to

97
00:07:50,719 --> 00:07:54,860
say well let me make a new table let's
twice as big, four times -- doesn't matter,

98
00:07:54,860 --> 00:07:59,209
something that's a lot bigger, and simply
take every element that I find here,

99
00:07:59,209 --> 00:08:02,419
whatever it might be,
compute its new hash value and just stick

100
00:08:02,419 --> 00:08:06,529
it into this table instead.  And so with a
different value here, might find that

101
00:08:06,529 --> 00:08:11,029
pizza is here but beer is down here;
they're no longer linked together -- quite

102
00:08:11,029 --> 00:08:15,680
possible because this value would
determine where they're put and so if I

103
00:08:15,680 --> 00:08:19,610
changed so that this is let's say a
table of 2 N or something like that,

104
00:08:19,610 --> 00:08:23,749
they might hash differently.  Might
hash the same too.  And so now you can see

105
00:08:23,749 --> 00:08:27,889
that on the average, the chains are going
to be half as big and only do this once

106
00:08:27,889 --> 00:08:31,909
in a while when the table starts to get
full, and maybe I make it four times as

107
00:08:31,909 --> 00:08:37,099
big.  And so at all times the accessed
information in this hash table is pretty

108
00:08:37,099 --> 00:08:41,659
much constant time -- you come in, you hash
it, and very short look down a list and

109
00:08:41,659 --> 00:08:44,839
you're done.  Once you've made this new
table of course, then you can throw away

110
00:08:44,839 --> 00:08:47,649
the information from that one.
>> Sean:  So the modulo or the

111
00:08:47,649 --> 00:08:51,880
amount to be modulo by will be N.
>> BWK: Yes,
right, exactly.  Yeah, I mean I've been

112
00:08:51,880 --> 00:08:55,720
careless because we started at zero and
we went up to N, and so that's really

113
00:08:55,720 --> 00:08:58,779
N plus one elements.  You have to be a
little cautious there, that's a classic

114
00:08:58,779 --> 00:09:03,220
kind of error that programming,
programmers -- other programmers -- might make.

115
00:09:03,220 --> 00:09:09,160
I would never do that.  But but that's the
idea.  And and then of course the details

116
00:09:09,160 --> 00:09:14,440
of what's a good hashing function and
how to make that really spread arbitrary

117
00:09:14,440 --> 00:09:18,940
information around -- it's still kind of a
you've got to be careful to get it right,

118
00:09:18,940 --> 00:09:21,820
but there's an awful lot of good
guidance and so for the most part it

119
00:09:21,820 --> 00:09:25,660
just works fine.  And and this is very
simple to implement; the amount of code

120
00:09:25,660 --> 00:09:30,070
in pick your favorite programming
language is probably a few tens of lines

121
00:09:30,070 --> 00:09:34,600
of code at most.  It's very compact, very
easy to do -- you do it once and then you

122
00:09:34,600 --> 00:09:38,350
say okay, now I understand how that stuff
works.  You don't have to think about it.

123
00:09:38,350 --> 00:09:41,620
You can use somebody else's implementation 
>> Sean: So they're saying so some

124
00:09:41,620 --> 00:09:45,610
of this is you write yourself but that
will probably be libraries out there.
>> BWK:  Yeah

125
00:09:45,610 --> 00:09:49,839
right if you're in Java there's a class
what is it, hash table or something like

126
00:09:49,839 --> 00:09:55,540
that I think; I've forgotten exactly.  In
Python there's the subscript dictionary

127
00:09:55,540 --> 00:10:02,649
that looks like that.  In Perl there's a
hash -- literally hash and so on.  These

128
00:10:02,649 --> 00:10:06,160
kinds of things, I've got too many of
them in my head, they blur, especially

129
00:10:06,160 --> 00:10:11,260
under pressure, and so I would have to go
and look to be sure but that's the

130
00:10:11,260 --> 00:10:14,160
essence of it.

131
00:10:15,950 --> 00:10:20,720
Self-publication is a recipe for having things disappear
without a trace.  And so the first

132
00:10:20,720 --> 00:10:24,079
edition did sort of disappear without
much trace.  The second edition was

133
00:10:24,079 --> 00:10:28,670
published by Princeton University Press
who also has an arrangement with Oxford

134
00:10:28,670 --> 00:10:35,800
University Press, and so I'm hopeful that
the book gets a lot more publicity.

