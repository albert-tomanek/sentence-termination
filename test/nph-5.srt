1
00:00:01,100 --> 00:00:04,580
So the other week there was an interesting announcement from Google

2
00:00:05,000 --> 00:00:08,080
they had to update YouTube because Psy's

3
00:00:08,560 --> 00:00:14,420
popular music video, Gangnam Style had managed to amass so many views

4
00:00:14,540 --> 00:00:18,660
that it overflowed the 32-bit integer that they were using to store

5
00:00:18,660 --> 00:00:22,359
view counts and so I thought it would be interesting to just take a look and remind ourselves of how

6
00:00:22,369 --> 00:00:23,750
computers store numbers

7
00:00:23,750 --> 00:00:27,250
and to see exactly why it actually broke 
YouTube

8
00:00:29,310 --> 00:00:37,000
so Psy managed to amass 2,147,483,647

9
00:00:37,410 --> 00:00:42,760
views on YouTube for his video. So the computer stores this information

10
00:00:42,760 --> 00:00:47,110
in binary and if we've got just one bit of
information one binary digit then we can

11
00:00:47,110 --> 00:00:48,010
store two

12
00:00:48,010 --> 00:00:51,530
values zero or one; on the other
hand,

13
00:00:51,530 --> 00:00:56,090
if we have two bits of information and so I represent this

14
00:00:56,090 --> 00:00:59,430
as two boxes and we can store

15
00:00:59,430 --> 00:01:04,339
four different values because we can put
zero in both boxes we can put a zero

16
00:01:04,339 --> 00:01:07,970
in the first box and the one in the
second we can put a one in the first box

17
00:01:07,970 --> 00:01:09,750
a zero in the second box

18
00:01:09,750 --> 00:01:12,650
and if we put a one in both boxes

19
00:01:12,650 --> 00:01:17,200
so we've got four possible values that we can store. Now just like when we count

20
00:01:17,200 --> 00:01:21,729
normally using decimal system we got
powers of 10, each of these boxes represents,

21
00:01:21,729 --> 00:01:22,939
we've got the first one represents

22
00:01:22,939 --> 00:01:27,100
ones or two to the power zero, and the
second one represents

23
00:01:27,100 --> 00:01:30,350
the twos or two to the power of

24
00:01:30,350 --> 00:01:34,630
one. And so if we add them together we've got no twos and no ones

25
00:01:34,630 --> 00:01:38,290
we get zero. No twos and one, so we
get one

26
00:01:38,290 --> 00:01:42,100
one two and no ones we get two

27
00:01:42,100 --> 00:01:46,670
and one two and one one we get three. So we can store four possible values

28
00:01:46,670 --> 00:01:50,740
from naught through to three. If we do the same

29
00:01:50,740 --> 00:01:56,110
with three bits, zero fours plus zero twos plus zero ones which is zero

30
00:01:56,110 --> 00:02:00,399
zero fours plus zero twos plus one one which is one

31
00:02:00,399 --> 00:02:04,130
and so on two, three, four,

32
00:02:04,130 --> 00:02:09,299
five, six, and seven

33
00:02:09,299 --> 00:02:13,620
apologies for the handwriting. And it's
exactly the same thing we can do we can

34
00:02:13,620 --> 00:02:16,790
extend this and every time we add an
extra bit we double the amount of

35
00:02:16,790 --> 00:02:19,260
information we can store certain store
eight numbers

36
00:02:19,260 --> 00:02:22,900
with three bits two to the power three we had four

37
00:02:22,900 --> 00:02:25,950
two the power three give us eight

38
00:02:25,950 --> 00:02:29,409
two to the power four would give us sixteen

39
00:02:29,409 --> 00:02:32,760
numbers it doubles again store zero through fifteen

40
00:02:32,760 --> 00:02:37,019
and two to the eight gives us 256

41
00:02:37,019 --> 00:02:40,409
different values 0 through 255

42
00:02:40,409 --> 00:02:45,230
and it extends up. Now YouTube, because their computers are probably when they  started

43
00:02:45,230 --> 00:02:46,340
writing and implementing this

44
00:02:46,340 --> 00:02:49,359
running 32-bit operating systems uses a
standard

45
00:02:49,359 --> 00:02:52,500
32-bit integer to store the

46
00:02:52,500 --> 00:02:55,680
view count. Makes sense; it's the default on
many systems

47
00:02:55,680 --> 00:03:00,250
and you think two billion or so views was unlikely to be amassed

48
00:03:00,250 --> 00:03:03,450
when you if think about it that's a third of the planet perhaps watching

49
00:03:03,450 --> 00:03:07,900
one video you'd think some of them have
actually something better to do with

50
00:03:07,900 --> 00:03:12,790
their lives. So a 32 bit system two to the power of 32 gives us

51
00:03:12,790 --> 00:03:17,780
4,294,967,296

52
00:03:17,780 --> 00:03:20,900
possible numbers that we can store that's
zero

53
00:03:20,900 --> 00:03:29,120
through to 4,294,967,295

54
00:03:29,140 --> 00:03:31,900
they're all the values
that we can store

55
00:03:31,909 --> 00:03:36,329
Why did YouTube break when it got past two billion but that's only half the amount

56
00:03:36,329 --> 00:03:37,189
you can fit

57
00:03:37,189 --> 00:03:41,870
in a 32-bit integer? Well computers can
also store negative numbers

58
00:03:41,870 --> 00:03:45,780
and the way they do that is by using
some of the bit patterns

59
00:03:45,780 --> 00:03:49,579
the zeros and ones that make up that 32-bit integer to mean

60
00:03:49,579 --> 00:03:52,970
negative numbers and others to mean
positive numbers

61
00:03:52,970 --> 00:03:57,620
so we get two billion positive numbers
and two billion negative numbers

62
00:03:57,620 --> 00:04:02,739
either side of zero. We can see
this if we consider a slightly simpler

63
00:04:02,739 --> 00:04:06,079
situation using only eight bits or a
single byte

64
00:04:06,079 --> 00:04:10,019
now the way computers store negative
numbers they use what's called the two's

65
00:04:10,019 --> 00:04:11,449
complement system and we'll

66
00:04:11,449 --> 00:04:14,949
do another video some time that will go into exactly how that works and the other

67
00:04:14,949 --> 00:04:16,700
systems that were used in the past

68
00:04:16,700 --> 00:04:20,139
but the basic thing to remember is that
the top bit

69
00:04:20,139 --> 00:04:23,900
bit 7 so if you number bit zero down here

70
00:04:23,900 --> 00:04:27,110
0, 1, 2, 3, 4, 5, 6, 7 so bit seven here

71
00:04:27,110 --> 00:04:31,139
effectively stores the sign if it's zero, it's a
positive number

72
00:04:31,139 --> 00:04:35,669
if it's one then it's a negative number.
If we have 127

73
00:04:35,669 --> 00:04:39,659
in decimal on we add one we
obviously get

74
00:04:39,659 --> 00:04:44,520
128 but 128 in binary would be

75
00:04:44,520 --> 00:04:47,909
1 0 0 0 0 0 0 0

76
00:04:47,909 --> 00:04:51,770
and if you remember what  I said the top bit, bit 7

77
00:04:51,770 --> 00:04:55,969
says whether it is positive or negative and we've gone from being positive 127

78
00:04:55,969 --> 00:05:02,039
to negative 128 this'll be what's called
an overflow error on the computer system

79
00:05:02,039 --> 00:05:05,659
because we've overflowed the range we
can store positive integers

80
00:05:05,659 --> 00:05:09,960
and gone back around into negative
integers and this is exactly the same that

81
00:05:09,960 --> 00:05:12,139
would have happened on YouTube if they
added one

82
00:05:12,139 --> 00:05:16,099
to Psy's hit count because it had gone from being positive

83
00:05:16,099 --> 00:05:19,820
two billion et cetera which is the highest number that they could store in a signed

84
00:05:19,820 --> 00:05:22,940
32-bit integer to negative

85
00:05:22,940 --> 00:05:27,320
minus two billion et cetera which is the
lowest negative number they can store.

86
00:05:27,320 --> 00:05:31,229
So you might be asking well why didn't they just switch to using unsigned integers; why did they

87
00:05:31,229 --> 00:05:34,599
decide to go up to using 64-bit number
which obviously gave them

88
00:05:34,599 --> 00:05:38,139
a lot more space several quintillion

89
00:05:38,139 --> 00:05:41,849
values to store why didn't they just use an unsigned number, that would double the number they

90
00:05:41,849 --> 00:05:42,630
could store

91
00:05:42,630 --> 00:05:45,870
One of the things you find which is why it's considered bad practice when writing

92
00:05:45,870 --> 00:05:48,320
software is that certain simple
calculations

93
00:05:48,320 --> 00:05:51,669
go wrong so for example say we
subtract

94
00:05:51,669 --> 00:05:55,099
two numbers, say we were to subtract the numbers

95
00:05:55,099 --> 00:05:58,240
5 and 3

96
00:05:58,240 --> 00:06:01,250
and we wanted to find out what the difference is well we subtract one from the other

97
00:06:01,250 --> 00:06:05,130
we get the number two say on the other
hand we define the difference between a

98
00:06:05,130 --> 00:06:06,479
123

99
00:06:06,479 --> 00:06:11,339
and 200 we do the same we subtract one
from the other

100
00:06:11,339 --> 00:06:14,760
now in a signed system that's fine you get
a -77

101
00:06:14,760 --> 00:06:19,449
and you can run that through a function
to get the absolute value in

102
00:06:19,449 --> 00:06:21,240
C it would probably be called ABS or abs

103
00:06:21,240 --> 00:06:24,780
and so we can find a difference
whichever way around quite easily

104
00:06:24,780 --> 00:06:27,510
but if we're using unsigned integers

105
00:06:27,510 --> 00:06:31,540
we can't store the value of minus
numbers so we'd end up getting random

106
00:06:31,540 --> 00:06:32,510
very big

107
00:06:32,510 --> 00:06:36,540
numbers appearing instead of the simple
difference that we'd expect

108
00:06:36,540 --> 00:06:39,580
So the point of view YouTube might be
that they want to work out

109
00:06:39,580 --> 00:06:44,060
how many views they've had between two points and they've had X views

110
00:06:44,060 --> 00:06:47,340
on Tuesday and now have Y views on
Wednesday subtract

111
00:06:47,340 --> 00:06:51,670
Y from X or X from Y, and suddenly if you do it one way it works and if you do the other way

112
00:06:52,040 --> 00:06:55,450
it doesn't. And so it's considered bad
practice when you are writing software that you want to

113
00:06:55,450 --> 00:06:58,370
be reliable and it's in Google's style guide
to programming

114
00:06:58,370 --> 00:07:01,590
which we can link to that you shouldn't
use

115
00:07:01,590 --> 00:07:05,310
unsigned numbers so what they've done is they've taken it from being

116
00:07:05,310 --> 00:07:09,880
signed 32-bit numbers to signed 64-bit
numbers to get that range they need

117
00:07:14,520 --> 00:07:17,770
17,432

118
00:07:17,770 --> 00:07:22,790
years so that's how many years were
taken one person to watch Gangnam style

119
00:07:22,790 --> 00:07:23,570
to break YouTube.

