1
00:00:00,000 --> 00:00:01,880
So I've been watching back over some old Computerphile videos

2
00:00:02,180 --> 00:00:03,260
as we all do

3
00:00:03,620 --> 00:00:06,900
and I was watching a video by Tom Rodden on cookies

4
00:00:07,180 --> 00:00:10,520
Rodden: How then do you do the little shopping carts?

5
00:00:10,660 --> 00:00:14,600
Pound: And he talks a lot about tracking cookies, which are a big deal, alright.

6
00:00:14,600 --> 00:00:16,800
And just a side note, I would say everyone should install Ghostery

7
00:00:16,800 --> 00:00:19,960
and stop people tracking their whereabouts and what they're up to

8
00:00:19,960 --> 00:00:21,080
and what they're browsing online.

9
00:00:21,080 --> 00:00:27,280
But I'm not talking about tracking cookies today – or persistent cookies – I'm talking about cookie stealing

10
00:00:27,280 --> 00:00:31,720
which is the idea of if I can get ahold of your cookie from your browser, in some way,

11
00:00:31,720 --> 00:00:34,580
I can then pretend to be you on that website.

12
00:00:38,040 --> 00:00:40,560
Perhaps a bit of a recap on what it is that a cookie does

13
00:00:40,560 --> 00:00:42,140
so that this puts it into context.

14
00:00:42,140 --> 00:00:45,380
Now of course if you want to know a lot more about cookies, you go back and look at Tom's video.

15
00:00:45,440 --> 00:00:50,720
HTTP and HTML are not persistent. I make a request to a website, it serves me HTML

16
00:00:50,720 --> 00:00:54,900
– and maybe Javascript – and that's the end of the transaction, as far as it's concerned.

17
00:00:54,900 --> 00:00:57,580
I make another request, it's a brand new transaction.

18
00:00:58,080 --> 00:01:03,300
So there's no standard way in that mechanism of me persisting.

19
00:01:03,300 --> 00:01:07,240
Interviewer: So when you say you make a request, that means, for example, you click on a link or something?

20
00:01:07,240 --> 00:01:11,900
Pound: Yeah. So I go into Google and I type www.google.co.uk, or I click on a link

21
00:01:11,980 --> 00:01:15,160
in a webpage that takes me to another website.

22
00:01:15,160 --> 00:01:18,760
Or, indeed, my browser needs to request an image from a server

23
00:01:18,760 --> 00:01:22,440
because I've clicked the plus icon on something and I'm trying to look at an image hi-res.

24
00:01:22,440 --> 00:01:26,720
Interviewer: So even if you're on the same site, you click on different links on that same site it […]

25
00:01:26,720 --> 00:01:30,580
Pound: It will start a new connection, or use the existing connection to send off another HTTP request

26
00:01:30,580 --> 00:01:33,900
which is basically just a string that says "I want this file, please send it back"

27
00:01:33,900 --> 00:01:36,160
and the server will hopefully send it back.

28
00:01:36,160 --> 00:01:41,020
Because this isn't persistent, the obvious problem is  how do we do things like shopping baskets

29
00:01:41,020 --> 00:01:45,560
and "I'm on stage 5 of 6 stages" in setting up my online banking or something

30
00:01:45,560 --> 00:01:47,540
how do we remember what I've already typed in?

31
00:01:47,540 --> 00:01:49,160
The way we do this is using cookies.

32
00:01:49,160 --> 00:01:54,620
So, the first ever time I visit a website, it might send me back a cookie that's maybe a unique identifier to me.

33
00:01:54,620 --> 00:01:56,700
So just let's say a string of numbers, alright?

34
00:01:56,700 --> 00:02:01,080
And then I think, "well, I'm going to go back to that website and register"

35
00:02:01,080 --> 00:02:06,260
so I type in my username that I want and I send off the username and the request for the next page.

36
00:02:06,260 --> 00:02:09,040
And I also send back this unique string of numbers.

37
00:02:09,040 --> 00:02:13,500
And the reason is because then the server can look in the database and go "oh yeah, I remember him,

38
00:02:13,500 --> 00:02:17,860
he was the one that was using this username, and I can now serve him this slightly different webpage

39
00:02:17,860 --> 00:02:21,960
where the username is already typed in." or "I have already remembered what's in his shopping basket"

40
00:02:21,960 --> 00:02:23,100
or something like this.

41
00:02:23,200 --> 00:02:30,520
That's what a cookie is for. Now, of course now as Tom rightly points out, they're also used for tracking what you're up to online.

42
00:02:30,520 --> 00:02:36,360
So banner ads and things will use tracking cookies to keep track of you between websites – which is kind of worrying.

43
00:02:36,360 --> 00:02:41,020
But, again, not going to talk about that anymore than to draw people's attention to how scary it is.

44
00:02:41,020 --> 00:02:45,300
The problem is that if I obtain a cookie off you, which is supposed to be secure,

45
00:02:45,800 --> 00:02:53,540
then I can send that to, let's say, Amazon or to a shop and say "I'm Sean please, you know, what's in his shopping basket"

46
00:02:53,540 --> 00:02:56,700
"What's his address?", "What's his credit card details?"

47
00:02:57,400 --> 00:02:59,720
"Can I change the address of this?"

48
00:02:59,720 --> 00:03:02,860
If I do that halfway through your transaction, when you've typed in your details,

49
00:03:02,860 --> 00:03:06,400
I can just override and change the shipping address and get stuff sent to my house instead.

50
00:03:06,660 --> 00:03:09,060
It's involved, but it could happen.

51
00:03:09,060 --> 00:03:11,320
If i can get ahold of that cookie.

52
00:03:11,320 --> 00:03:15,160
Now those cookies are stored by the browser, and they're on your computer

53
00:03:15,160 --> 00:03:16,820
so that's quite difficult for me to do.

54
00:03:16,820 --> 00:03:20,140
But cross-site scripting is a very easy way of doing it.

55
00:03:20,140 --> 00:03:25,220
So that's what we're going to do today. We're gonna steal a cookie, and we're gonna do it using a cross-site scripting attack.

56
00:03:25,220 --> 00:03:29,380
Now this ties back into a different video that Tom Scott did on cross-site scripting.

57
00:03:29,380 --> 00:03:33,640
But what we're basically going to do is we're going to inject a script into a blog

58
00:03:33,940 --> 00:03:39,840
– not a secure blog, I should say – and that is going to, when anyone else visits the site

59
00:03:39,840 --> 00:03:42,660
obtain their session cookie and send it to me.

60
00:03:42,660 --> 00:03:46,340
And that I could theoretically use to take over their session.

61
00:03:46,340 --> 00:03:51,180
This is the world's best blog, of course. Alright, it looks good and it's got good content on it.

62
00:03:51,180 --> 00:03:55,260
Here's a picture of a kitten and some kind of banner and that's pretty much it.

63
00:03:55,260 --> 00:03:59,640
And some Lorem Ipsum. And then this blog has crucially got a comments feed at the bottom

64
00:03:59,640 --> 00:04:02,760
So if we look at the comments: "Many thanks, love the blog" – That sort of stuff.

65
00:04:02,760 --> 00:04:07,420
It's all very positive – well nearly – and the point is I can type extra comments in here.

66
00:04:07,420 --> 00:04:13,540
So I can say: "Thanks!"  from Mike again. And I can post this in, and then when I scroll to the bottom

67
00:04:14,000 --> 00:04:16,640
there it is. And the time that I did it on.

68
00:04:16,640 --> 00:04:21,400
This is just the kind of time where a cross-site scripting attack is possible if you haven't coded your website properly.

69
00:04:22,850 --> 00:04:27,020
ok so what I need to be doing when
someone types some some text in here is

70
00:04:27,020 --> 00:04:31,190
making sure that's what it is and isn't
in fact valid HTML script my or

71
00:04:31,190 --> 00:04:34,790
JavaScript because if it is then what
happens is this browser received it back

72
00:04:34,790 --> 00:04:38,150
to the server and has no reason to think
that isn't just part of what the server

73
00:04:38,150 --> 00:04:39,080
intended

74
00:04:39,080 --> 00:04:42,530
I think because it's just a script tag
like any other the server will probably

75
00:04:42,530 --> 00:04:46,460
be serving script tags anyway, right, for
doing other things and it just serves

76
00:04:46,460 --> 00:04:50,150
another one that's fair enough i mean
they do that all the time so we run it

77
00:04:50,150 --> 00:04:54,560
ok and then that's where is a problem so
it's a responsibility of the server and

78
00:04:54,560 --> 00:04:58,490
the person programming the server to
make sure that when I submit data it

79
00:04:58,490 --> 00:04:59,090
doesn't

80
00:04:59,090 --> 00:05:03,080
it isn't actual script, or things that
can run

81
00:05:03,080 --> 00:05:06,199
ok so this is a very similar to an SQL
injection

82
00:05:06,199 --> 00:05:11,449
except we're putting us we are injecting
HTML instead of SQL ok

83
00:05:11,449 --> 00:05:14,960
they're very similar kinds of attacks so
let's see if it works

84
00:05:14,960 --> 00:05:18,139
the most obvious example be a really
simple one let's see if we can get a

85
00:05:18,139 --> 00:05:22,340
pop-up to appear so I'm gonna opening
closing HTML tags and then we're going

86
00:05:22,340 --> 00:05:25,940
to say alert "XSS !"

87
00:05:25,940 --> 00:05:31,130
ok so theoretically what will happen is
this page will serve these comments to

88
00:05:31,130 --> 00:05:35,540
me when I go to this website and they
will see this script and not think it's

89
00:05:35,540 --> 00:05:38,120
a comment they will think it's part of
the actual webpage to be run and

90
00:05:38,120 --> 00:05:39,950
executed and then off there we go...

91
00:05:39,950 --> 00:05:42,740
so let's see if it works. I need to put
a name ok so i don't want to incriminate

92
00:05:42,740 --> 00:05:45,260
myself so let's put in someone else so
like Sean

93
00:05:45,260 --> 00:05:49,070
for example i could submit so I reload
this web page of someone else

94
00:05:49,070 --> 00:05:53,060
I get a little pop-up that says
localhost XSS ok so the service

95
00:05:53,060 --> 00:05:56,780
telling me XSS! this is where you
stop and then you go off and tell them

96
00:05:56,780 --> 00:06:00,229
about it but you can go further than
this. To be absolutely clear, this is my own website

97
00:06:00,229 --> 00:06:04,669
running on my laptop - it's not secure
on purpose and it doesn't matter if I

98
00:06:04,669 --> 00:06:06,889
hack it because no one no harm is coming up this

99
00:06:06,889 --> 00:06:10,550
ok I wouldn't ever do this on a public
website so i just loaded some files to

100
00:06:10,550 --> 00:06:13,430
show you how the blog works behind the
scenes so you get an idea of what's

101
00:06:13,430 --> 00:06:13,970
going on

102
00:06:13,970 --> 00:06:18,710
so this is PHP right so it's going to be
a mixture of PHP code and HTML

103
00:06:18,710 --> 00:06:22,580
right, some which is a result of PHP some
which is just put in

104
00:06:22,580 --> 00:06:26,180
so here you can see that i called
something called session start now what

105
00:06:26,180 --> 00:06:29,539
session starts going to do is PHP is
going to look to see if the cookie they

106
00:06:29,539 --> 00:06:33,260
received is a valid session and if it is
it's going to resume my session its going

107
00:06:33,260 --> 00:06:36,979
to remember who i am and any parameters
that this website has set for me will be

108
00:06:36,979 --> 00:06:41,240
remembered in the database if there is
no cookie on file for me that means i'm

109
00:06:41,240 --> 00:06:45,530
coming at it for the first time for my
session expired and it will make one and

110
00:06:45,530 --> 00:06:49,820
send it back to me in the first response
right now that all happens within this

111
00:06:49,820 --> 00:06:52,669
session start thing and is not something i need
to concern myself with as a developer

112
00:06:52,669 --> 00:06:54,650
you can do it yourself

113
00:06:54,650 --> 00:06:58,940
now I've got standard submit comments
okay so I output the blog text and then

114
00:06:58,940 --> 00:07:04,340
I check if someone clicks "Submit comment"
button it will check the post values for

115
00:07:04,340 --> 00:07:09,020
content and their name and then it will
put them into a database now as a side

116
00:07:09,020 --> 00:07:11,480
note I am actually escaping these
mySQL strings

117
00:07:11,480 --> 00:07:16,430
there we are so I'm not vulnerable here to a
mySQL injection because of these bits

118
00:07:16,430 --> 00:07:19,880
so that's good but I'm not vulnerable to
SQL injection unfortunately I am vulnerable

119
00:07:19,880 --> 00:07:23,960
to cross site scripting so I'm not doing
any kind of cross-site scripting

120
00:07:23,960 --> 00:07:25,010
detection here

121
00:07:25,010 --> 00:07:29,300
okay I'm just gonna serve back whatever
the person typed in now as an attacker

122
00:07:29,300 --> 00:07:32,630
what I've done is I've created another
PHP file called submit cookie dot PHP

123
00:07:32,630 --> 00:07:38,480
that is it just a file that takes as a
parameter, a string of a cookie stores in a

124
00:07:38,480 --> 00:07:42,620
database on these two lines here and
then serves him back in image

125
00:07:42,620 --> 00:07:45,530
so what I'm going to do is I'm going to
write a cross-site scripting attack which is

126
00:07:45,530 --> 00:07:50,660
basically a comment on this blog that
causes their website or their client to

127
00:07:50,660 --> 00:07:54,260
visit this submit cookie dot PHP and
give them the cookie

128
00:07:54,770 --> 00:07:59,030
ok so because this is this is one
question that I remember rising when we talked

129
00:07:59,030 --> 00:08:01,790
about these sorts of things before is
the difference between client and server

130
00:08:01,790 --> 00:08:06,470
side you know you're doing some code
that will cause the server to come and

131
00:08:06,470 --> 00:08:07,430
find this code?

132
00:08:07,430 --> 00:08:11,300
imagine that I've so imagine that there
is no PHP in there is no script right

133
00:08:11,300 --> 00:08:13,190
All there is is a website with some images on
it

134
00:08:13,190 --> 00:08:17,840
ok you're the server and I'm the client I
say can I get index.html?

135
00:08:17,840 --> 00:08:19,400
you say yeah here it is

136
00:08:19,400 --> 00:08:22,970
ok I read it and show on the screen and
then I realized that actually it's got

137
00:08:22,970 --> 00:08:27,800
an image in it that has a source that's
like your-website / image1.jpg

138
00:08:27,800 --> 00:08:28,460
right

139
00:08:28,460 --> 00:08:33,080
so I say okay I need this too can i have
jpg this JPEG and you send it back so i

140
00:08:33,080 --> 00:08:36,590
make multiple requests to you to get the
various bits of content just like that

141
00:08:36,590 --> 00:08:37,820
and just like with a banner ad

142
00:08:37,820 --> 00:08:41,330
I might come to a bit in the HTML that tells me to go to some other website or

143
00:08:41,330 --> 00:08:44,570
something else and then and there is no
reason for me to think that is not a

144
00:08:44,570 --> 00:08:45,710
reasonable request

145
00:08:45,710 --> 00:08:49,040
maybe your images are stored on a
different server so i'm going to go

146
00:08:49,040 --> 00:08:49,670
there

147
00:08:49,670 --> 00:08:53,180
ok so i go i was an image and I need
that from over here so I go over there

148
00:08:53,180 --> 00:08:54,410
and I get it right

149
00:08:54,410 --> 00:08:58,340
the fact that it also bagged my cookie
is just an unfortunate side effect but

150
00:08:58,340 --> 00:09:00,650
it's not something that was necessary
and it wasn't something was intended

151
00:09:00,650 --> 00:09:03,740
when they developed the web but it's
unfortunately what happens now

152
00:09:04,910 --> 00:09:09,500
so that's what's going to happen ok
maybe right so I'm gonna start with

153
00:09:09,500 --> 00:09:12,770
script so we already know this blog is
vulnerable to cross-site scripting so

154
00:09:12,770 --> 00:09:16,070
we don't need to worry specifically about it i don't
have to obfuscate it or do anything clever i'm

155
00:09:16,070 --> 00:09:18,620
going to say document dot write

156
00:09:18,620 --> 00:09:20,720
ok now that's just going to write
nothing to the screen right so my

157
00:09:20,720 --> 00:09:23,270
comment on my blog is just going to be

158
00:09:23,270 --> 00:09:26,240
a script that does nothing okay that's
not very interesting so let's do

159
00:09:26,240 --> 00:09:27,260
something a bit more interesting

160
00:09:27,260 --> 00:09:30,350
our PHP file takes the cookie and gives an image back so let's just show it on the

161
00:09:30,350 --> 00:09:35,990
screen right? So image tag in HTML IMG is
the image tag the source of that is

162
00:09:35,990 --> 00:09:42,110
HTTP code on / localhost now this could
obviously be a different website / submit

163
00:09:42,110 --> 00:09:49,190
cookie dot PHP Question Mark - now this takes get
requests so I say submit a cookie . PHP

164
00:09:49,190 --> 00:09:53,600
? and when I say cookie equals and then
that's what I'm gonna steal their cookie

165
00:09:53,600 --> 00:09:54,740
and give it to myself

166
00:09:54,740 --> 00:10:00,520
all right to do that all I do is I say
plus document . cookie

167
00:10:00,520 --> 00:10:01,580
- I escape this so

168
00:10:01,610 --> 00:10:05,540
it passes nicely over HTML plus and then i'm
going to close my image tag because

169
00:10:05,540 --> 00:10:08,840
otherwise it's going to malformed HTML and it might execute properly and

170
00:10:08,840 --> 00:10:10,100
then a single quote

171
00:10:10,100 --> 00:10:13,820
ok so let's break down what this is
doing the script here is telling the

172
00:10:13,820 --> 00:10:18,560
website that this is a script to be run and not a standard piece of HTML then the

173
00:10:18,560 --> 00:10:21,680
document.right function is just a
piece of JavaScript that says dump this

174
00:10:21,680 --> 00:10:23,060
out as text

175
00:10:23,060 --> 00:10:27,140
hey but it can also take parameters
rather than just text yeah and it's

176
00:10:27,140 --> 00:10:31,160
going to output some valid HTML which is
a link to an image but that image is not

177
00:10:31,160 --> 00:10:33,590
held on the server held theoretically
elsewhere

178
00:10:33,590 --> 00:10:39,290
ok now the actual thing that is
returning an image is a PHP file not an

179
00:10:39,290 --> 00:10:40,220
actual image

180
00:10:40,220 --> 00:10:43,910
ok which also takes the parameter of the cookie which is a bit worrying

181
00:10:43,910 --> 00:10:48,380
alright so when I first went to this
blog i requested index dot PHP server

182
00:10:48,380 --> 00:10:52,550
started executing this and called the
session start function right which went

183
00:10:52,550 --> 00:10:54,950
oh he needs a session cookie and sent me
one

184
00:10:54,950 --> 00:10:57,860
okay in the response so I've then bagged
that session cookie and put it in my

185
00:10:57,860 --> 00:11:00,470
browser then when i visit that blog
again

186
00:11:00,470 --> 00:11:03,740
I've returned that session cookie to the
server to say it's me again yeah

187
00:11:03,740 --> 00:11:07,250
and so if i had if I had some some
persistence on this blog like I was in the

188
00:11:07,250 --> 00:11:11,630
middle of writing a document it was half
written it would remember who I was now

189
00:11:13,010 --> 00:11:16,670
so this cookie is stored by my browser
and theoretically the attacker can't get to it

190
00:11:16,670 --> 00:11:18,350
because on my browser and not theirs

191
00:11:18,350 --> 00:11:23,240
alright so what you have to do is trick
the browser into sending it back so the order

192
00:11:23,240 --> 00:11:24,920
that things happen are

193
00:11:24,920 --> 00:11:29,600
I then send a index.php request to
his blog to look at it

194
00:11:29,600 --> 00:11:34,520
ok it sends him back at a big website
with stuff on it including some comments

195
00:11:34,520 --> 00:11:35,720
one of which has a script in it

196
00:11:35,720 --> 00:11:41,060
it that says there's an image here you
need okay at this PHP file

197
00:11:41,060 --> 00:11:44,449
ok so I go oh brilliant, and I get my
document.cookie and I send it off to

198
00:11:44,449 --> 00:11:48,199
that PHP file and I get back an image
and I think nothing's gone wrong but

199
00:11:48,199 --> 00:11:49,220
they've now got my cookie

200
00:11:49,220 --> 00:11:54,050
>>But the cookie went off to the place
where the image was supposedly? and of course this

201
00:11:54,050 --> 00:11:56,990
will return an image but in some cases
it would return nothing and there will

202
00:11:56,990 --> 00:11:59,810
be no evidence that this happened at all, apart from if you actually looked at the

203
00:11:59,810 --> 00:12:03,079
source code for the file which of course
you know someone's going to do but no

204
00:12:03,079 --> 00:12:06,920
one no one normally is going to do so if
this got onto a forum or something

205
00:12:07,519 --> 00:12:10,639
lots of people could look at this before
they realize what was going on now it's

206
00:12:10,639 --> 00:12:14,180
not unusual for an image to be served by
script over by an actual hard link to an

207
00:12:14,180 --> 00:12:18,439
image because for example >>might be an advert or? It might be an advert

208
00:12:18,439 --> 00:12:21,110
dynamically created it could be
different it could be a resolution

209
00:12:21,110 --> 00:12:23,720
specified in there or you know a good
lots of different reasons why you do

210
00:12:23,720 --> 00:12:24,050
that

211
00:12:24,050 --> 00:12:27,649
ok so a lot of the time it's going to be
dynamically generated in some way

212
00:12:27,649 --> 00:12:31,579
so this is no different to that, except that this is also taking a parameter that it

213
00:12:31,579 --> 00:12:36,439
shouldn't be taking ok but I've got no
control over that and the the browser

214
00:12:36,439 --> 00:12:39,680
it's not that insecure it's just that
he's got no reason to doubt me

215
00:12:39,680 --> 00:12:45,170
you know scripts using document dot
cookies legitimately you know exist and

216
00:12:45,170 --> 00:12:48,470
if you block them then websites start
to fall down because they use cookies

217
00:12:48,470 --> 00:12:49,490
for persistence

218
00:12:49,490 --> 00:12:52,459
so it's a you know a real problem. Let's click Submit and see what happens

219
00:12:52,459 --> 00:12:56,089
>>so what have you done there you've refreshed it? Yeah & it didn't work, cause I've done it wrong

220
00:12:56,089 --> 00:12:58,399
You know what I didn't type in my name that's
why it didn't work

221
00:12:58,399 --> 00:13:03,500
so Mike right I'll take credit for this
one so we can submit that and then we run it

222
00:13:03,500 --> 00:13:08,029
ok and we scroll down and we got a Cookie Monster picture so kindly submit cookie

223
00:13:08,029 --> 00:13:11,779
dot PHP has taken my cookie and returned
an image

224
00:13:11,779 --> 00:13:16,040
ok now it's not unusual for people to
have images on comments or on forum

225
00:13:16,040 --> 00:13:19,250
posts and things so people have seen
this image apart from the fact that it's the

226
00:13:19,250 --> 00:13:22,730
cookie monster might not realize what
just happened

227
00:13:22,730 --> 00:13:26,750
ok it's completely silent it's happened
behind the scenes. All that's happened is they

228
00:13:26,750 --> 00:13:29,540
just quickly whipped their cookie off to someone
else and returned an image

229
00:13:29,540 --> 00:13:33,379
ok these kind of request for images happen
all the time it's just this one's got a

230
00:13:33,379 --> 00:13:37,370
cookie on it and that's bad news. As an attacker, this is my database and I select

231
00:13:37,370 --> 00:13:42,529
* from evil which is the name of my
table that's registering the cookie

232
00:13:42,529 --> 00:13:45,529
you can see what my session cookie now
phpsessid

233
00:13:46,130 --> 00:13:51,290
it's stuck in here so that's the session
cookie for that session of PHP now in

234
00:13:51,290 --> 00:13:54,470
this blog that doesn't have much effect
right firstly because i already have

235
00:13:54,470 --> 00:13:58,130
this cookie but mostly because there
isn't anything on this blog that having a

236
00:13:58,130 --> 00:14:01,640
cookie will help with right. It won't let
you get to my basket or get to my credit

237
00:14:01,640 --> 00:14:02,900
card details or login

238
00:14:02,900 --> 00:14:08,300
ok but if you did this on a website
where there was shopping involved or

239
00:14:08,300 --> 00:14:12,080
money involved or banking website and if
not properly coded it getting that

240
00:14:12,080 --> 00:14:16,220
session cookie could trick the bank into
thinking that you're resuming their session

241
00:14:16,220 --> 00:14:19,880
you know they could get so much
distance into let's say a transaction

242
00:14:19,880 --> 00:14:23,270
then you could steal their session go in
and just change the bank account details

243
00:14:23,270 --> 00:14:24,800
to yours right

244
00:14:24,800 --> 00:14:29,360
the bank doesn't really have any idea of
knowing that people's session cookies

245
00:14:29,360 --> 00:14:35,060
are the only thing that really tie them
to that that thing to that website

246
00:14:35,060 --> 00:14:39,680
I mean you can do more and complicated
things like you can you can pin IPs

247
00:14:39,680 --> 00:14:43,250
to session cookies for example right but
people's IPs change

248
00:14:43,250 --> 00:14:47,750
ok they might move from one Wi-Fi area
to another their IP changes do you

249
00:14:47,750 --> 00:14:50,000
necessarily want them to have to re-authenticate

250
00:14:50,000 --> 00:14:53,870
perhaps you do for security right but it
depends on the way website is developed

251
00:14:53,870 --> 00:14:57,230
this is sort of a prime example of a
time of check to time of use issue

252
00:14:57,230 --> 00:15:02,090
ok which is a security term which is
basically the idea of something changing

253
00:15:02,090 --> 00:15:04,970
between when someone authenticates and
when they do something and causing a

254
00:15:04,970 --> 00:15:09,410
security problem so i type in the
username password on Amazon right then

255
00:15:09,410 --> 00:15:13,490
ten minutes later I've wandered off
someone else turns up and spends all my

256
00:15:13,490 --> 00:15:13,820
money

257
00:15:13,820 --> 00:15:16,820
shipping stuff to their address ok now
that would be a problem

258
00:15:16,820 --> 00:15:20,510
so what Amazon does is, they force me to reauthenticate just before I actually

259
00:15:20,510 --> 00:15:22,010
type in my details

260
00:15:22,010 --> 00:15:25,190
ok right before you transact you can add loads of stuff to my basket

261
00:15:25,190 --> 00:15:28,310
without having to authenticate myself

262
00:15:28,310 --> 00:15:31,400
it's remember that from last time but as
soon as I actually have to do anything

263
00:15:31,400 --> 00:15:33,890
proper like spending any money

264
00:15:33,890 --> 00:15:37,160
it's going to ask me for my credentials
again same with online banking if i use

265
00:15:37,160 --> 00:15:41,660
my bank if I log into my online banking
i use some kind of chip & pin device to

266
00:15:41,660 --> 00:15:44,540
authenticate myself that lets me the
first time

267
00:15:44,540 --> 00:15:48,080
it lets me see my bank balances if i
want to send any money its going to ask

268
00:15:48,080 --> 00:15:52,760
me again because they can't risk me
wandering off by mistake leaving that

269
00:15:52,760 --> 00:15:53,710
browser open

270
00:15:53,710 --> 00:15:56,710
or someone having stole my cookie

271
00:15:58,060 --> 00:16:02,020
We keep carving away at this and what we'll end up with is something that looks nearly like a cube so

272
00:16:02,020 --> 00:16:05,770
we probably may be a bit of extra there
and a bit of extra there and there but

273
00:16:05,770 --> 00:16:07,270
we'll get it we're getting there

274
00:16:07,270 --> 00:16:10,600
ok now some objects obviously a more
amenable to this than others but the more

275
00:16:10,600 --> 00:16:11,650
images we get the better it is

